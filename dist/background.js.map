{"version":3,"file":"background.js","sources":["../src/platform/background.js"],"sourcesContent":["/**\n * Comet Extension Background Script (Complete Fix for Tabs API)\n * @module @voilajsx/comet\n * @file src/platform/background.js\n */\n\nimport { storage } from './storage.js';\nimport { messaging } from './messaging.js';\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser;\n  } else if (typeof chrome !== 'undefined') {\n    return chrome;\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Comet Background Manager with Fixed Tabs API\n */\nclass CometBackgroundManager {\n  constructor() {\n    this.api = browserAPI;\n    this.extensionId = this.api.runtime.id;\n    this.version = this.api.runtime.getManifest().version;\n    this.messageHandlers = new Map();\n    this.eventListeners = new Map();\n    this.isInitialized = false;\n\n    this.setupEventListeners();\n    this.initialize();\n  }\n\n  setupEventListeners() {\n    // Extension lifecycle events\n    this.api.runtime.onInstalled.addListener((details) => {\n      this.handleInstallation(details);\n    });\n\n    this.api.runtime.onStartup.addListener(() => {\n      this.handleStartup();\n    });\n\n    // Message handling\n    this.api.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // Keep message channel open for async responses\n    });\n\n    // Tab events\n    this.api.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      this.emitEvent('tabUpdated', { tabId, changeInfo, tab });\n    });\n\n    this.api.tabs.onActivated.addListener((activeInfo) => {\n      this.emitEvent('tabActivated', activeInfo);\n    });\n\n    // Storage change events\n    this.api.storage.onChanged.addListener((changes, namespace) => {\n      this.emitEvent('storageChanged', { changes, namespace });\n    });\n\n    // Action click events\n    if (this.api.action && this.api.action.onClicked) {\n      this.api.action.onClicked.addListener((tab) => {\n        this.emitEvent('actionClicked', { tab });\n      });\n    }\n  }\n\n  async initialize() {\n    if (this.isInitialized) return;\n\n    console.log(\n      `[Comet Platform] Background service worker v${this.version} initialized`\n    );\n\n    try {\n      await this.loadAppConfig();\n      this.setupDefaultHandlers();\n      this.emitEvent('backgroundReady', {\n        version: this.version,\n        extensionId: this.extensionId,\n      });\n      this.isInitialized = true;\n    } catch (error) {\n      console.error(\n        '[Comet Platform] Background initialization failed:',\n        error\n      );\n    }\n  }\n\n  async loadAppConfig() {\n    try {\n      const config = await storage.get('appConfig');\n      this.appConfig = config || {};\n      if (this.appConfig.messageHandlers) {\n        this.registerMessageHandlers(this.appConfig.messageHandlers);\n      }\n    } catch (error) {\n      console.warn('[Comet Platform] No app config found, using defaults');\n      this.appConfig = {};\n    }\n  }\n\n  setupDefaultHandlers() {\n    // Storage operations\n    this.registerMessageHandler('storage.get', async (data) => {\n      return await storage.get(data.keys);\n    });\n\n    this.registerMessageHandler('storage.set', async (data) => {\n      return await storage.set(data.items);\n    });\n\n    this.registerMessageHandler('storage.remove', async (data) => {\n      return await storage.remove(data.keys);\n    });\n\n    this.registerMessageHandler('storage.clear', async () => {\n      return await storage.clear();\n    });\n\n    // ✅ FIXED: Tabs operations with correct response format\n    this.registerMessageHandler('tabs.create', async (data) => {\n      try {\n        console.log('[Comet Platform] Creating tab with data:', data);\n\n        const createOptions = {\n          url: data.url || 'about:blank',\n          active: data.active !== false, // Default to true unless explicitly false\n        };\n\n        // Add optional properties if provided\n        if (data.windowId) createOptions.windowId = data.windowId;\n        if (data.index !== undefined) createOptions.index = data.index;\n        if (data.pinned !== undefined) createOptions.pinned = data.pinned;\n\n        const tab = await this.api.tabs.create(createOptions);\n\n        console.log('[Comet Platform] Tab created successfully:', tab);\n        return { success: true, tab };\n      } catch (error) {\n        console.error('[Comet Platform] Tab creation failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('tabs.query', async (data) => {\n      try {\n        console.log('[Comet Platform] Querying tabs with:', data);\n\n        const queryOptions = data || {};\n        const tabs = await this.api.tabs.query(queryOptions);\n\n        console.log('[Comet Platform] Query returned', tabs.length, 'tabs');\n\n        // ✅ CRITICAL FIX: Return tabs directly in data field, not wrapped\n        return tabs; // This is what was wrong - we were returning { success: true, data: tabs }\n      } catch (error) {\n        console.error('[Comet Platform] Tab query failed:', error);\n        throw error; // Let the framework handle the error wrapping\n      }\n    });\n\n    this.registerMessageHandler('tabs.getCurrent', async () => {\n      try {\n        console.log('[Comet Platform] Getting current tab');\n\n        const tabs = await this.api.tabs.query({\n          active: true,\n          currentWindow: true,\n        });\n\n        const currentTab = tabs[0] || null;\n        console.log('[Comet Platform] Current tab:', currentTab);\n\n        return currentTab;\n      } catch (error) {\n        console.error('[Comet Platform] Get current tab failed:', error);\n        throw error;\n      }\n    });\n\n    this.registerMessageHandler('tabs.update', async (data) => {\n      try {\n        console.log('[Comet Platform] Updating tab:', data);\n\n        const updateOptions = {};\n        if (data.url) updateOptions.url = data.url;\n        if (data.active !== undefined) updateOptions.active = data.active;\n        if (data.pinned !== undefined) updateOptions.pinned = data.pinned;\n        if (data.muted !== undefined) updateOptions.muted = data.muted;\n\n        const tab = await this.api.tabs.update(data.tabId, updateOptions);\n\n        console.log('[Comet Platform] Tab updated:', tab);\n        return { success: true, tab };\n      } catch (error) {\n        console.error('[Comet Platform] Tab update failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('tabs.remove', async (data) => {\n      try {\n        console.log('[Comet Platform] Removing tabs:', data);\n\n        const tabIds = Array.isArray(data.tabIds) ? data.tabIds : [data.tabId];\n        await this.api.tabs.remove(tabIds);\n\n        console.log('[Comet Platform] Tabs removed successfully');\n        return { success: true, removedCount: tabIds.length };\n      } catch (error) {\n        console.error('[Comet Platform] Tab removal failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('tabs.duplicate', async (data) => {\n      try {\n        console.log('[Comet Platform] Duplicating tab:', data.tabId);\n\n        const tab = await this.api.tabs.duplicate(data.tabId);\n\n        console.log('[Comet Platform] Tab duplicated:', tab);\n        return { success: true, tab };\n      } catch (error) {\n        console.error('[Comet Platform] Tab duplication failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('tabs.reload', async (data) => {\n      try {\n        console.log('[Comet Platform] Reloading tab:', data);\n\n        const reloadOptions = {};\n        if (data.bypassCache !== undefined)\n          reloadOptions.bypassCache = data.bypassCache;\n\n        await this.api.tabs.reload(data.tabId, reloadOptions);\n\n        console.log('[Comet Platform] Tab reloaded successfully');\n        return { success: true };\n      } catch (error) {\n        console.error('[Comet Platform] Tab reload failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('tabs.sendMessage', async (data) => {\n      try {\n        console.log('[Comet Platform] Sending message to tab:', data.tabId);\n\n        const response = await messaging.sendToTab(data.tabId, data.message);\n\n        console.log('[Comet Platform] Message sent to tab successfully');\n        return response;\n      } catch (error) {\n        console.error('[Comet Platform] Send message to tab failed:', error);\n        throw error;\n      }\n    });\n\n    // Extension info\n    this.registerMessageHandler('extension.getInfo', async () => {\n      return {\n        id: this.extensionId,\n        version: this.version,\n        manifest: this.api.runtime.getManifest(),\n      };\n    });\n\n    // Badge operations\n    this.registerMessageHandler('badge.setText', async (data) => {\n      return await this.setBadgeText(data.text, data.tabId);\n    });\n\n    this.registerMessageHandler('badge.setColor', async (data) => {\n      return await this.setBadgeColor(data.color, data.tabId);\n    });\n\n    // Bookmarks operations\n    this.registerMessageHandler('bookmarks.create', async (data) => {\n      try {\n        console.log('[Comet Platform] Creating bookmark:', data);\n\n        const bookmark = await this.api.bookmarks.create({\n          title: data.title,\n          url: data.url,\n          parentId: data.parentId,\n        });\n\n        console.log('[Comet Platform] Bookmark created:', bookmark);\n        return { success: true, bookmark };\n      } catch (error) {\n        console.error('[Comet Platform] Bookmark creation failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    // Context menu operations\n    this.registerMessageHandler('contextMenu.create', async (data) => {\n      try {\n        console.log('[Comet Platform] Creating context menu:', data);\n\n        await this.api.contextMenus.create({\n          id: data.id,\n          title: data.title,\n          contexts: data.contexts || ['page'],\n        });\n\n        console.log('[Comet Platform] Context menu created successfully');\n        return { success: true };\n      } catch (error) {\n        console.error('[Comet Platform] Context menu creation failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    this.registerMessageHandler('contextMenu.remove', async (data) => {\n      try {\n        console.log('[Comet Platform] Removing context menu:', data.id);\n\n        await this.api.contextMenus.remove(data.id);\n\n        console.log('[Comet Platform] Context menu removed successfully');\n        return { success: true };\n      } catch (error) {\n        console.error('[Comet Platform] Context menu removal failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    // Downloads operations\n    this.registerMessageHandler('downloads.downloadData', async (data) => {\n      try {\n        console.log('[Comet Platform] Starting download:', data.filename);\n\n        const blob = new Blob([data.data], {\n          type: data.mimeType || 'text/plain',\n        });\n        const url = URL.createObjectURL(blob);\n\n        const downloadId = await this.api.downloads.download({\n          url: url,\n          filename: data.filename || 'download.txt',\n        });\n\n        // Clean up blob URL after a delay\n        setTimeout(() => URL.revokeObjectURL(url), 10000);\n\n        console.log('[Comet Platform] Download started:', downloadId);\n        return { success: true, downloadId };\n      } catch (error) {\n        console.error('[Comet Platform] Download failed:', error);\n        return { success: false, error: error.message };\n      }\n    });\n\n    // Universal API proxy handler\n    this.registerMessageHandler('api.fetch', async (data) => {\n      return await this.universalApiFetch(data);\n    });\n  }\n\n  async universalApiFetch({\n    url,\n    method = 'GET',\n    headers = {},\n    body = null,\n    timeout = 30000,\n  }) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const fetchOptions = {\n        method: method.toUpperCase(),\n        headers: {\n          ...(body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n          ...headers,\n        },\n        signal: controller.signal,\n      };\n\n      if (body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n        fetchOptions.body = JSON.stringify(body);\n      }\n\n      console.log(`[Comet API] ${method.toUpperCase()} ${url}`);\n\n      const response = await fetch(url, fetchOptions);\n      clearTimeout(timeoutId);\n\n      let data;\n      const contentType = response.headers.get('content-type');\n\n      try {\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json();\n        } else {\n          data = await response.text();\n          if (data.trim().startsWith('{') || data.trim().startsWith('[')) {\n            try {\n              data = JSON.parse(data);\n            } catch (e) {\n              // Keep as text if JSON parsing fails\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`[Comet API] Failed to parse response body:`, error);\n        data = null;\n      }\n\n      const result = {\n        success: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        data: data,\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n\n      return result;\n    } catch (error) {\n      console.error(`[Comet API] Request failed:`, error);\n\n      return {\n        success: false,\n        error: error.message,\n        isTimeout: error.name === 'AbortError',\n        status: 0,\n        data: null,\n        headers: {},\n      };\n    }\n  }\n\n  async handleInstallation(details) {\n    console.log(`[Comet Platform] Installation event: ${details.reason}`);\n\n    const installationData = {\n      reason: details.reason,\n      previousVersion: details.previousVersion,\n      timestamp: Date.now(),\n      version: this.version,\n    };\n\n    try {\n      switch (details.reason) {\n        case 'install':\n          await this.handleFirstInstall();\n          break;\n        case 'update':\n          await this.handleUpdate(details.previousVersion);\n          break;\n        case 'chrome_update':\n        case 'browser_update':\n          await this.handleBrowserUpdate();\n          break;\n      }\n\n      this.emitEvent('installed', installationData);\n    } catch (error) {\n      console.error('[Comet Platform] Installation handling failed:', error);\n    }\n  }\n\n  async handleFirstInstall() {\n    console.log('[Comet Platform] First installation');\n    await storage.set({\n      installDate: Date.now(),\n      version: this.version,\n      firstInstall: true,\n    });\n  }\n\n  async handleUpdate(previousVersion) {\n    console.log(\n      `[Comet Platform] Updated from ${previousVersion} to ${this.version}`\n    );\n    await storage.set({\n      lastUpdate: Date.now(),\n      version: this.version,\n      previousVersion,\n    });\n  }\n\n  async handleBrowserUpdate() {\n    console.log('[Comet Platform] Browser updated');\n  }\n\n  async handleStartup() {\n    console.log('[Comet Platform] Extension startup');\n    this.emitEvent('startup', { timestamp: Date.now() });\n  }\n\n  async handleMessage(message, sender, sendResponse) {\n    try {\n      const { type, data, id } = message;\n\n      if (!type) {\n        sendResponse({ success: false, error: 'Message type required' });\n        return;\n      }\n\n      console.log(`[Comet Platform] Message received: ${type}`, data);\n\n      const handler = this.messageHandlers.get(type);\n      if (!handler) {\n        const result = await this.emitEvent('message', { type, data, sender });\n        sendResponse(\n          result || {\n            success: false,\n            error: `No handler for message type: ${type}`,\n            availableHandlers: Array.from(this.messageHandlers.keys()),\n          }\n        );\n        return;\n      }\n\n      // Execute handler\n      const result = await handler(data, sender);\n\n      // ✅ CRITICAL FIX: Always wrap in success response format\n      sendResponse({\n        success: true,\n        data: result,\n        id,\n      });\n    } catch (error) {\n      console.error('[Comet Platform] Message handling error:', error);\n      sendResponse({\n        success: false,\n        error: error.message || 'Internal error',\n        id: message.id,\n      });\n    }\n  }\n\n  registerMessageHandler(type, handler) {\n    this.messageHandlers.set(type, handler);\n  }\n\n  registerMessageHandlers(handlers) {\n    Object.entries(handlers).forEach(([type, handler]) => {\n      this.registerMessageHandler(type, handler);\n    });\n  }\n\n  addEventListener(event, listener) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(listener);\n  }\n\n  async emitEvent(event, data) {\n    const listeners = this.eventListeners.get(event) || [];\n\n    if (listeners.length === 0) {\n      console.log(`[Comet Platform] Event emitted: ${event}`, data);\n      return null;\n    }\n\n    let lastResult = null;\n    for (const listener of listeners) {\n      try {\n        lastResult = await listener(data);\n      } catch (error) {\n        console.error(\n          `[Comet Platform] Event listener error for ${event}:`,\n          error\n        );\n      }\n    }\n\n    return lastResult;\n  }\n\n  async setBadgeText(text, tabId = null) {\n    try {\n      if (!this.api.action) {\n        console.warn('[Comet Platform] Badge API not available');\n        return false;\n      }\n\n      const options = { text: String(text) };\n      if (tabId) options.tabId = tabId;\n\n      await this.api.action.setBadgeText(options);\n      return true;\n    } catch (error) {\n      console.error('[Comet Platform] Badge text update failed:', error);\n      return false;\n    }\n  }\n\n  async setBadgeColor(color, tabId = null) {\n    try {\n      if (!this.api.action) {\n        console.warn('[Comet Platform] Badge API not available');\n        return false;\n      }\n\n      const options = { color };\n      if (tabId) options.tabId = tabId;\n\n      await this.api.action.setBadgeBackgroundColor(options);\n      return true;\n    } catch (error) {\n      console.error('[Comet Platform] Badge color update failed:', error);\n      return false;\n    }\n  }\n\n  getExtensionInfo() {\n    return {\n      id: this.extensionId,\n      version: this.version,\n      manifest: this.api.runtime.getManifest(),\n      initialized: this.isInitialized,\n      browser: this.getBrowserInfo(),\n    };\n  }\n\n  getBrowserInfo() {\n    if (typeof browser !== 'undefined') {\n      return { type: 'firefox', api: 'browser' };\n    } else if (typeof chrome !== 'undefined') {\n      return { type: 'chromium', api: 'chrome' };\n    }\n    return { type: 'unknown', api: 'unknown' };\n  }\n}\n\n// Initialize the Comet background manager\nconst backgroundManager = new CometBackgroundManager();\n\n// Export for app usage\nglobalThis.backgroundManager = backgroundManager;\nexport { backgroundManager };\n"],"names":["browserAPI","CometBackgroundManager","details","message","sender","sendResponse","tabId","changeInfo","tab","activeInfo","changes","namespace","error","config","storage","data","createOptions","queryOptions","tabs","currentTab","updateOptions","tabIds","reloadOptions","response","messaging","bookmark","blob","url","downloadId","method","headers","body","timeout","controller","timeoutId","fetchOptions","contentType","installationData","previousVersion","type","id","handler","result","handlers","event","listener","listeners","lastResult","text","options","color","backgroundManager"],"mappings":"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"}
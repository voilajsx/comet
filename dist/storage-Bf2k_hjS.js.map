{"version":3,"mappings":"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","names":["browserAPI","CometStorageManager","message","data","defaults","__vitePreload","error","keys","fallback","result","output","key","merged","value","callback","listener","changes","namespace","storage"],"ignoreList":[],"sources":["../src/platform/storage.ts"],"sourcesContent":["/**\n * Comet Framework - Essential Storage Utility with Auto-reload on Rebuild\n * @module @voilajsx/comet\n * @file src/platform/storage.ts\n */\n\n// Type definitions\ninterface StorageDefaults {\n  [key: string]: any;\n}\n\ninterface StorageChanges {\n  [key: string]: {\n    oldValue?: any;\n    newValue?: any;\n  };\n}\n\ninterface StorageChangeCallback {\n  (changes: StorageChanges, namespace: string): void;\n}\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser; // Firefox, newer browsers\n  } else if (typeof chrome !== 'undefined') {\n    return chrome; // Chrome, Edge, Opera, Brave\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Essential Comet Storage Manager with auto-reload defaults\n */\nclass CometStorageManager {\n  private api: typeof chrome | typeof browser;\n  private defaults: StorageDefaults;\n  private defaultsLoaded: boolean;\n  private isInitialized: boolean;\n  private debugEnabled: boolean;\n\n  constructor() {\n    this.api = browserAPI;\n    this.defaults = {};\n    this.defaultsLoaded = false;\n    this.isInitialized = false;\n    this.debugEnabled = false;\n\n    this.initialize();\n  }\n\n  /**\n   * Debug logging utility\n   */\n  private log(message: string, data?: any): void {\n    if (this.debugEnabled) {\n      if (data) {\n        console.log(`[Comet Storage] ${message}`, data);\n      } else {\n        console.log(`[Comet Storage] ${message}`);\n      }\n    }\n  }\n\n  /**\n   * Initialize storage with auto-loading defaults\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      await this.loadDefaults();\n      \n      // Enable debug logging based on defaults\n      this.debugEnabled = this.defaults['debug-enabled'] || false;\n      \n      await this.initializeDefaults();\n      this.isInitialized = true;\n      this.log('Initialized with defaults');\n    } catch (error) {\n      console.warn('[Comet Storage] No defaults found, continuing without defaults');\n      this.defaults = {};\n      this.defaultsLoaded = true;\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Load defaults from defaults.ts\n   */\n  async loadDefaults(): Promise<void> {\n    if (this.defaultsLoaded) return;\n\n    try {\n      // Import from TS file instead of JSON for better compatibility\n      const { default: defaults } = await import('../defaults.ts');\n      this.defaults = defaults || {};\n      this.defaultsLoaded = true;\n      this.log('Loaded defaults from defaults.ts:', Object.keys(this.defaults));\n    } catch (error: unknown) {\n      console.warn('[Comet Storage] Failed to load defaults.ts:', error);\n      this.defaults = {};\n      this.defaultsLoaded = true;\n    }\n  }\n\n  /**\n   * Initialize storage with defaults - always reloads on extension reload (batched writes)\n   */\n  async initializeDefaults(): Promise<void> {\n    try {\n      this.log('Reloading defaults on extension startup');\n\n      // Batch all defaults into a single write operation\n      if (Object.keys(this.defaults).length > 0) {\n        // Set all defaults in one operation to avoid quota limits\n        await this.api.storage.sync.set(this.defaults);\n        this.log('All defaults applied in batch:', Object.keys(this.defaults));\n      } else {\n        this.log('No defaults to apply');\n      }\n\n      // Mark as initialized (local storage doesn't count towards quota)\n      await this.api.storage.local.set({ _defaultsInitialized: true });\n    } catch (error: unknown) {\n      console.warn('[Comet Storage] Failed to initialize defaults:', error);\n    }\n  }\n\n  /**\n   * Get data from storage with auto-fallback to defaults\n   */\n  async get(keys: string, fallback?: any): Promise<any>;\n  async get(keys: string[], fallback?: any): Promise<Record<string, any>>;\n  async get(keys: null): Promise<Record<string, any>>;\n  async get(keys: string | string[] | null, fallback: any = undefined): Promise<any> {\n    try {\n      await this.initialize();\n\n      // Handle single key\n      if (typeof keys === 'string') {\n        const result = await this.api.storage.sync.get(keys);\n\n        if (result[keys] !== undefined) {\n          return result[keys];\n        }\n\n        // Try defaults\n        if (this.defaults[keys] !== undefined) {\n          return this.defaults[keys];\n        }\n\n        return fallback;\n      }\n\n      // Handle array of keys\n      if (Array.isArray(keys)) {\n        const result = await this.api.storage.sync.get(keys);\n        const output: Record<string, any> = {};\n\n        for (const key of keys) {\n          if (result[key] !== undefined) {\n            output[key] = result[key];\n          } else if (this.defaults[key] !== undefined) {\n            output[key] = this.defaults[key];\n          } else {\n            output[key] = undefined;\n          }\n        }\n\n        return output;\n      }\n\n      // Handle null (get all)\n      if (keys === null) {\n        const result = await this.api.storage.sync.get(null);\n\n        // Merge with defaults\n        const merged = { ...this.defaults };\n        Object.assign(merged, result);\n        delete merged._defaultsInitialized; // Remove internal flag\n\n        return merged;\n      }\n\n      return fallback;\n    } catch (error: unknown) {\n      console.error('[Comet Storage] Get operation failed:', error);\n      throw new Error('Failed to read from storage: ' + (error instanceof Error ? error.message : String(error)));\n    }\n  }\n\n  /**\n   * Set data to storage\n   */\n  async set(data: Record<string, any>): Promise<boolean>;\n  async set(key: string, value: any): Promise<boolean>;\n  async set(data: Record<string, any> | string, value?: any): Promise<boolean> {\n    try {\n      await this.initialize();\n\n      // Handle set(key, value) syntax\n      if (typeof data === 'string') {\n        await this.api.storage.sync.set({ [data]: value });\n        return true;\n      }\n\n      // Handle object syntax\n      if (typeof data === 'object' && data !== null) {\n        await this.api.storage.sync.set(data);\n        return true;\n      }\n\n      return false;\n    } catch (error: unknown) {\n      console.error('[Comet Storage] Set operation failed:', error);\n      throw new Error('Failed to write to storage: ' + (error instanceof Error ? error.message : String(error)));\n    }\n  }\n\n  /**\n   * Remove data from storage\n   */\n  async remove(keys: string | string[]): Promise<boolean> {\n    try {\n      await this.api.storage.sync.remove(keys);\n      return true;\n    } catch (error: unknown) {\n      console.error('[Comet Storage] Remove operation failed:', error);\n      throw new Error('Failed to remove from storage: ' + (error instanceof Error ? error.message : String(error)));\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   */\n  async clear(): Promise<boolean> {\n    try {\n      await this.api.storage.sync.clear();\n      await this.api.storage.local.clear();\n      return true;\n    } catch (error: unknown) {\n      console.error('[Comet Storage] Clear operation failed:', error);\n      throw new Error('Failed to clear storage: ' + (error instanceof Error ? error.message : String(error)));\n    }\n  }\n\n  /**\n   * Check if key exists in storage (including defaults)\n   */\n  async has(key: string): Promise<boolean> {\n    try {\n      const value = await this.get(key);\n      return value !== undefined;\n    } catch (error: unknown) {\n      return false;\n    }\n  }\n\n  /**\n   * Listen to storage changes\n   */\n  onChange(callback: StorageChangeCallback): () => void {\n    const listener = (changes: StorageChanges, namespace: string) => {\n      callback(changes, namespace);\n    };\n\n    this.api.storage.onChanged.addListener(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.api.storage.onChanged.removeListener(listener);\n    };\n  }\n\n  /**\n   * Get all defaults\n   */\n  getDefaults(): StorageDefaults {\n    return JSON.parse(JSON.stringify(this.defaults));\n  }\n\n  /**\n   * Force reload defaults (simplified - just reinitialize)\n   */\n  async reloadDefaults(): Promise<boolean> {\n    try {\n      // Reset state\n      this.defaultsLoaded = false;\n      this.isInitialized = false;\n      this.defaults = {};\n\n      // Reinitialize (will always reload)\n      await this.initialize();\n\n      this.log('Defaults reloaded manually');\n      return true;\n    } catch (error: unknown) {\n      console.error('[Comet Storage] Failed to reload defaults:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Storage error class\n */\nclass CometStorageError extends Error {\n  originalError?: Error;\n\n  constructor(message: string, originalError?: Error) {\n    super(message);\n    this.name = 'CometStorageError';\n    this.originalError = originalError;\n  }\n}\n\n// Create and export storage instance\nexport const storage = new CometStorageManager();\n\n// Export class for advanced usage\nexport { CometStorageManager, CometStorageError };"],"file":"storage-Bf2k_hjS.js"}
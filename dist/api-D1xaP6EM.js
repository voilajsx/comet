const o=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})(),u={async fetch(t,e={}){try{const r=await new Promise((s,a)=>{const c={type:"api.fetch",data:{url:t,method:e.method||"GET",headers:e.headers||{},body:e.body?typeof e.body=="string"?e.body:JSON.stringify(e.body):null,timeout:e.timeout||3e4}};o.runtime.sendMessage.length>1?o.runtime.sendMessage(c,n=>{o.runtime.lastError?a(new Error(o.runtime.lastError.message||"Unknown runtime error")):s(n)}):o.runtime.sendMessage(c).then(s).catch(n=>{a(new Error(n instanceof Error?n.message:"Unknown runtime error"))})});if(r.success&&r.data){const s=r.data;return{ok:s.success,status:s.status,json:()=>Promise.resolve(s.data),data:s.data,error:s.error}}else return{ok:!1,status:0,error:r.error||"Service worker error",json:()=>Promise.reject(new Error(r.error||"Service worker error"))}}catch(r){return{ok:!1,status:0,error:r instanceof Error?r.message:String(r),json:()=>Promise.reject(r)}}},async get(t,e={}){return this.fetch(t,{method:"GET",headers:e})},async post(t,e=null,r={}){return this.fetch(t,{method:"POST",body:e,headers:r})},async put(t,e=null,r={}){return this.fetch(t,{method:"PUT",body:e,headers:r})},async patch(t,e=null,r={}){return this.fetch(t,{method:"PATCH",body:e,headers:r})},async delete(t,e={}){return this.fetch(t,{method:"DELETE",headers:e})}};export{u as c};
//# sourceMappingURL=api-D1xaP6EM.js.map

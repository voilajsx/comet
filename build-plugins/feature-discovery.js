/**
 * Vite Plugin - Auto-Discovery for Comet Features
 * Automatically generates src/features/index.js by scanning feature folders
 * @file build-plugins/feature-discovery.js
 */

import { readdir, writeFile, access } from 'fs/promises';
import { join, resolve } from 'path';

/**
 * Auto-discover Comet features and generate index.js
 * @returns {import('vite').Plugin}
 */
export function autoDiscoverFeatures() {
  const FEATURES_DIR = 'src/features';
  const INDEX_FILE = 'src/features/index.js';

  return {
    name: 'comet-feature-discovery',

    // Run during build start
    buildStart() {
      return generateFeatureIndex();
    },

    // Run during dev server start
    configureServer(server) {
      generateFeatureIndex();

      // Watch for new feature folders in dev mode
      const watcher = server.watcher;
      watcher.add(FEATURES_DIR);

      watcher.on('addDir', (path) => {
        if (path.includes(FEATURES_DIR) && path !== FEATURES_DIR) {
          console.log(`[Comet] New feature detected, regenerating index...`);
          setTimeout(generateFeatureIndex, 100); // Small delay for folder creation
        }
      });

      watcher.on('unlinkDir', (path) => {
        if (path.includes(FEATURES_DIR)) {
          console.log(`[Comet] Feature removed, regenerating index...`);
          generateFeatureIndex();
        }
      });
    },
  };

  /**
   * Scan features directory and generate index.js
   */
  async function generateFeatureIndex() {
    try {
      const featuresPath = resolve(FEATURES_DIR);
      const indexPath = resolve(INDEX_FILE);

      // Check if features directory exists
      try {
        await access(featuresPath);
      } catch {
        console.warn(`[Comet] Features directory not found: ${FEATURES_DIR}`);
        return;
      }

      // Get all directories in features folder
      const items = await readdir(featuresPath, { withFileTypes: true });
      const featureDirs = items
        .filter((item) => item.isDirectory())
        .map((item) => item.name)
        .filter((name) => !name.startsWith('.')) // Skip hidden folders
        .sort(); // Alphabetical order

      // Check which features have valid index.js files
      const validFeatures = [];

      for (const featureDir of featureDirs) {
        const featureIndexPath = join(featuresPath, featureDir, 'index.js');
        try {
          await access(featureIndexPath);
          validFeatures.push(featureDir);
        } catch {
          console.warn(
            `[Comet] Feature '${featureDir}' missing index.js, skipping`
          );
        }
      }

      // Generate the index.js content
      const indexContent = generateIndexContent(validFeatures);

      // Write the file
      await writeFile(indexPath, indexContent, 'utf8');

      console.log(
        `[Comet] Generated features/index.js with ${validFeatures.length} features:`,
        validFeatures
      );
    } catch (error) {
      console.error('[Comet] Failed to generate feature index:', error);
    }
  }

  /**
   * Generate the content for features/index.js
   * @param {string[]} features - Array of valid feature directory names
   * @returns {string} Generated file content
   */
  function generateIndexContent(features) {
    const header = `/**
 * Comet Framework - Feature Module Registry (Auto-Generated)
 * DO NOT EDIT - This file is automatically generated by the build system
 * Add new features by creating folders in src/features/
 * @module @voilajsx/comet
 * @file src/features/index.js
 */

// ============================================================================
// ðŸš€ AUTO-DISCOVERED FEATURES - Generated at build time
// ============================================================================

`;

    const exports = features
      .map((feature) => {
        // Convert folder name to camelCase export name
        const exportName = toCamelCase(feature);
        return `export { default as ${exportName} } from './${feature}/index.js';`;
      })
      .join('\n');

    const footer = `

// ============================================================================
// Total features: ${features.length}
// Last generated: ${new Date().toISOString()}
// ============================================================================
`;

    return header + exports + footer;
  }

  /**
   * Convert kebab-case to camelCase
   * @param {string} str - Input string
   * @returns {string} camelCase string
   */
  function toCamelCase(str) {
    return str.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());
  }
}

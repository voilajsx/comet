import{s as l,m as g}from"./messaging-CQ-fz_cX.js";const h=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class f{constructor(){this.api=h,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.eventListeners=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onStartup.addListener(()=>{this.handleStartup()}),this.api.runtime.onMessage.addListener((e,t,s)=>(this.handleMessage(e,t,s),!0)),this.api.tabs.onUpdated.addListener((e,t,s)=>{this.emitEvent("tabUpdated",{tabId:e,changeInfo:t,tab:s})}),this.api.tabs.onActivated.addListener(e=>{this.emitEvent("tabActivated",e)}),this.api.storage.onChanged.addListener((e,t)=>{this.emitEvent("storageChanged",{changes:e,namespace:t})}),this.api.action&&this.api.action.onClicked&&this.api.action.onClicked.addListener(e=>{this.emitEvent("actionClicked",{tab:e})})}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Background service worker v${this.version} initialized`);try{await this.loadAppConfig(),this.setupDefaultHandlers(),this.emitEvent("backgroundReady",{version:this.version,extensionId:this.extensionId}),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Background initialization failed:",e)}}}async loadAppConfig(){try{const e=await l.get("appConfig");this.appConfig=e||{},this.appConfig.messageHandlers&&this.registerMessageHandlers(this.appConfig.messageHandlers)}catch{console.warn("[Comet Platform] No app config found, using defaults"),this.appConfig={}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await l.get(e.keys)),this.registerMessageHandler("storage.set",async e=>await l.set(e.items)),this.registerMessageHandler("storage.remove",async e=>await l.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await l.clear()),this.registerMessageHandler("tabs.create",async e=>{try{console.log("[Comet Platform] Creating tab with data:",e);const t={url:e.url||"about:blank",active:e.active!==!1};e.windowId&&(t.windowId=e.windowId),e.index!==void 0&&(t.index=e.index),e.pinned!==void 0&&(t.pinned=e.pinned);const s=await this.api.tabs.create(t);return console.log("[Comet Platform] Tab created successfully:",s),{success:!0,tab:s}}catch(t){return console.error("[Comet Platform] Tab creation failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("tabs.query",async e=>{try{console.log("[Comet Platform] Querying tabs with:",e);const t=e||{},s=await this.api.tabs.query(t);return console.log("[Comet Platform] Query returned",s.length,"tabs"),s}catch(t){throw console.error("[Comet Platform] Tab query failed:",t),t}}),this.registerMessageHandler("tabs.getCurrent",async()=>{try{console.log("[Comet Platform] Getting current tab");const t=(await this.api.tabs.query({active:!0,currentWindow:!0}))[0]||null;return console.log("[Comet Platform] Current tab:",t),t}catch(e){throw console.error("[Comet Platform] Get current tab failed:",e),e}}),this.registerMessageHandler("tabs.update",async e=>{try{console.log("[Comet Platform] Updating tab:",e);const t={};e.url&&(t.url=e.url),e.active!==void 0&&(t.active=e.active),e.pinned!==void 0&&(t.pinned=e.pinned),e.muted!==void 0&&(t.muted=e.muted);const s=await this.api.tabs.update(e.tabId,t);return console.log("[Comet Platform] Tab updated:",s),{success:!0,tab:s}}catch(t){return console.error("[Comet Platform] Tab update failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("tabs.remove",async e=>{try{console.log("[Comet Platform] Removing tabs:",e);const t=Array.isArray(e.tabIds)?e.tabIds:[e.tabId];return await this.api.tabs.remove(t),console.log("[Comet Platform] Tabs removed successfully"),{success:!0,removedCount:t.length}}catch(t){return console.error("[Comet Platform] Tab removal failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("tabs.duplicate",async e=>{try{console.log("[Comet Platform] Duplicating tab:",e.tabId);const t=await this.api.tabs.duplicate(e.tabId);return console.log("[Comet Platform] Tab duplicated:",t),{success:!0,tab:t}}catch(t){return console.error("[Comet Platform] Tab duplication failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("tabs.reload",async e=>{try{console.log("[Comet Platform] Reloading tab:",e);const t={};return e.bypassCache!==void 0&&(t.bypassCache=e.bypassCache),await this.api.tabs.reload(e.tabId,t),console.log("[Comet Platform] Tab reloaded successfully"),{success:!0}}catch(t){return console.error("[Comet Platform] Tab reload failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("tabs.sendMessage",async e=>{try{console.log("[Comet Platform] Sending message to tab:",e.tabId);const t=await g.sendToTab(e.tabId,e.message);return console.log("[Comet Platform] Message sent to tab successfully"),t}catch(t){throw console.error("[Comet Platform] Send message to tab failed:",t),t}}),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()})),this.registerMessageHandler("badge.setText",async e=>await this.setBadgeText(e.text,e.tabId)),this.registerMessageHandler("badge.setColor",async e=>await this.setBadgeColor(e.color,e.tabId)),this.registerMessageHandler("bookmarks.create",async e=>{try{console.log("[Comet Platform] Creating bookmark:",e);const t=await this.api.bookmarks.create({title:e.title,url:e.url,parentId:e.parentId});return console.log("[Comet Platform] Bookmark created:",t),{success:!0,bookmark:t}}catch(t){return console.error("[Comet Platform] Bookmark creation failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("contextMenu.create",async e=>{try{return console.log("[Comet Platform] Creating context menu:",e),await this.api.contextMenus.create({id:e.id,title:e.title,contexts:e.contexts||["page"]}),console.log("[Comet Platform] Context menu created successfully"),{success:!0}}catch(t){return console.error("[Comet Platform] Context menu creation failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("contextMenu.remove",async e=>{try{return console.log("[Comet Platform] Removing context menu:",e.id),await this.api.contextMenus.remove(e.id),console.log("[Comet Platform] Context menu removed successfully"),{success:!0}}catch(t){return console.error("[Comet Platform] Context menu removal failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("downloads.downloadData",async e=>{try{console.log("[Comet Platform] Starting download:",e.filename);const t=new Blob([e.data],{type:e.mimeType||"text/plain"}),s=URL.createObjectURL(t),r=await this.api.downloads.download({url:s,filename:e.filename||"download.txt"});return setTimeout(()=>URL.revokeObjectURL(s),1e4),console.log("[Comet Platform] Download started:",r),{success:!0,downloadId:r}}catch(t){return console.error("[Comet Platform] Download failed:",t),{success:!1,error:t.message}}}),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e))}async universalApiFetch({url:e,method:t="GET",headers:s={},body:r=null,timeout:i=3e4}){try{const o=new AbortController,c=setTimeout(()=>o.abort(),i),u={method:t.toUpperCase(),headers:{...r&&["POST","PUT","PATCH"].includes(t.toUpperCase())?{"Content-Type":"application/json"}:{},...s},signal:o.signal};r&&["POST","PUT","PATCH"].includes(t.toUpperCase())&&(u.body=JSON.stringify(r)),console.log(`[Comet API] ${t.toUpperCase()} ${e}`);const a=await fetch(e,u);clearTimeout(c);let n;const d=a.headers.get("content-type");try{if(d&&d.includes("application/json"))n=await a.json();else if(n=await a.text(),n.trim().startsWith("{")||n.trim().startsWith("["))try{n=JSON.parse(n)}catch{}}catch(m){console.warn("[Comet API] Failed to parse response body:",m),n=null}return{success:a.ok,status:a.status,statusText:a.statusText,data:n,headers:Object.fromEntries(a.headers.entries())}}catch(o){return console.error("[Comet API] Request failed:",o),{success:!1,error:o.message,isTimeout:o.name==="AbortError",status:0,data:null,headers:{}}}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);const t={reason:e.reason,previousVersion:e.previousVersion,timestamp:Date.now(),version:this.version};try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break;case"chrome_update":case"browser_update":await this.handleBrowserUpdate();break}this.emitEvent("installed",t)}catch(s){console.error("[Comet Platform] Installation handling failed:",s)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await l.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await l.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleBrowserUpdate(){console.log("[Comet Platform] Browser updated")}async handleStartup(){console.log("[Comet Platform] Extension startup"),this.emitEvent("startup",{timestamp:Date.now()})}async handleMessage(e,t,s){try{const{type:r,data:i,id:o}=e;if(!r){s({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${r}`,i);const c=this.messageHandlers.get(r);if(!c){const a=await this.emitEvent("message",{type:r,data:i,sender:t});s(a||{success:!1,error:`No handler for message type: ${r}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const u=await c(i,t);s({success:!0,data:u,id:o})}catch(r){console.error("[Comet Platform] Message handling error:",r),s({success:!1,error:r.message||"Internal error",id:e.id})}}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}registerMessageHandlers(e){Object.entries(e).forEach(([t,s])=>{this.registerMessageHandler(t,s)})}addEventListener(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}async emitEvent(e,t){const s=this.eventListeners.get(e)||[];if(s.length===0)return console.log(`[Comet Platform] Event emitted: ${e}`,t),null;let r=null;for(const i of s)try{r=await i(t)}catch(o){console.error(`[Comet Platform] Event listener error for ${e}:`,o)}return r}async setBadgeText(e,t=null){try{if(!this.api.action)return console.warn("[Comet Platform] Badge API not available"),!1;const s={text:String(e)};return t&&(s.tabId=t),await this.api.action.setBadgeText(s),!0}catch(s){return console.error("[Comet Platform] Badge text update failed:",s),!1}}async setBadgeColor(e,t=null){try{if(!this.api.action)return console.warn("[Comet Platform] Badge API not available"),!1;const s={color:e};return t&&(s.tabId=t),await this.api.action.setBadgeBackgroundColor(s),!0}catch(s){return console.error("[Comet Platform] Badge color update failed:",s),!1}}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const p=new f;globalThis.backgroundManager=p;
//# sourceMappingURL=background.js.map

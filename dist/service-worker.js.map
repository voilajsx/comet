{"version":3,"file":"service-worker.js","sources":["../src/platform/service-worker.js"],"sourcesContent":["/**\n * Comet Framework - Essential Service Worker (Background Script)\n * @module @voilajsx/comet\n * @file src/platform/service-worker.js\n */\n\nimport { storage } from './storage.js';\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser;\n  } else if (typeof chrome !== 'undefined') {\n    return chrome;\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Essential Comet Service Worker Manager\n * Only the core features most extensions actually need\n */\nclass CometServiceWorkerManager {\n  constructor() {\n    this.api = browserAPI;\n    this.extensionId = this.api.runtime.id;\n    this.version = this.api.runtime.getManifest().version;\n    this.messageHandlers = new Map();\n    this.isInitialized = false;\n\n    this.setupEventListeners();\n    this.initialize();\n  }\n\n  setupEventListeners() {\n    // Extension lifecycle\n    this.api.runtime.onInstalled.addListener((details) => {\n      this.handleInstallation(details);\n    });\n\n    // Message handling\n    this.api.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // Keep message channel open for async responses\n    });\n  }\n\n  async initialize() {\n    if (this.isInitialized) return;\n\n    console.log(`[Comet Platform] Service worker v${this.version} initialized`);\n\n    try {\n      this.setupDefaultHandlers();\n      this.isInitialized = true;\n    } catch (error) {\n      console.error(\n        '[Comet Platform] Service worker initialization failed:',\n        error\n      );\n    }\n  }\n\n  setupDefaultHandlers() {\n    // Storage operations - proxy to storage utility\n    this.registerMessageHandler('storage.get', async (data) => {\n      return await storage.get(data.keys, data.fallback);\n    });\n\n    this.registerMessageHandler('storage.set', async (data) => {\n      return await storage.set(data.items || data);\n    });\n\n    this.registerMessageHandler('storage.remove', async (data) => {\n      return await storage.remove(data.keys);\n    });\n\n    this.registerMessageHandler('storage.clear', async () => {\n      return await storage.clear();\n    });\n\n    // Basic tabs operations - most common needs\n    this.registerMessageHandler('tabs.query', async (data) => {\n      try {\n        const tabs = await this.api.tabs.query(data || {});\n        return tabs; // Return tabs directly\n      } catch (error) {\n        throw error;\n      }\n    });\n\n    this.registerMessageHandler('tabs.getCurrent', async () => {\n      try {\n        const tabs = await this.api.tabs.query({\n          active: true,\n          currentWindow: true,\n        });\n        return tabs[0] || null;\n      } catch (error) {\n        throw error;\n      }\n    });\n\n    // Badge operations - very common for status display\n    this.registerMessageHandler('badge.setText', async (data) => {\n      try {\n        if (!this.api.action) return false;\n\n        const options = { text: String(data.text || '') };\n        if (data.tabId) options.tabId = data.tabId;\n\n        await this.api.action.setBadgeText(options);\n        return true;\n      } catch (error) {\n        console.error('[Comet Platform] Badge setText failed:', error);\n        return false;\n      }\n    });\n\n    this.registerMessageHandler('badge.setColor', async (data) => {\n      try {\n        if (!this.api.action) return false;\n\n        const options = { color: data.color };\n        if (data.tabId) options.tabId = data.tabId;\n\n        await this.api.action.setBadgeBackgroundColor(options);\n        return true;\n      } catch (error) {\n        console.error('[Comet Platform] Badge setColor failed:', error);\n        return false;\n      }\n    });\n\n    // Universal API proxy - solves CORS issues\n    this.registerMessageHandler('api.fetch', async (data) => {\n      return await this.universalApiFetch(data);\n    });\n\n    // Extension info\n    this.registerMessageHandler('extension.getInfo', async () => {\n      return {\n        id: this.extensionId,\n        version: this.version,\n        manifest: this.api.runtime.getManifest(),\n      };\n    });\n  }\n\n  /**\n   * Universal API fetch handler - solves CORS issues\n   */\n  async universalApiFetch({\n    url,\n    method = 'GET',\n    headers = {},\n    body = null,\n    timeout = 30000,\n  }) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const fetchOptions = {\n        method: method.toUpperCase(),\n        headers: {\n          ...(body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n          ...headers,\n        },\n        signal: controller.signal,\n      };\n\n      if (body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n        fetchOptions.body = JSON.stringify(body);\n      }\n\n      console.log(`[Comet API] ${method.toUpperCase()} ${url}`);\n\n      const response = await fetch(url, fetchOptions);\n      clearTimeout(timeoutId);\n\n      let data;\n      const contentType = response.headers.get('content-type');\n\n      try {\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json();\n        } else {\n          data = await response.text();\n          if (data.trim().startsWith('{') || data.trim().startsWith('[')) {\n            try {\n              data = JSON.parse(data);\n            } catch (e) {\n              // Keep as text if JSON parsing fails\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`[Comet API] Failed to parse response body:`, error);\n        data = null;\n      }\n\n      return {\n        success: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        data: data,\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n    } catch (error) {\n      console.error(`[Comet API] Request failed:`, error);\n\n      return {\n        success: false,\n        error: error.message,\n        isTimeout: error.name === 'AbortError',\n        status: 0,\n        data: null,\n        headers: {},\n      };\n    }\n  }\n\n  async handleInstallation(details) {\n    console.log(`[Comet Platform] Installation event: ${details.reason}`);\n\n    try {\n      switch (details.reason) {\n        case 'install':\n          await this.handleFirstInstall();\n          break;\n        case 'update':\n          await this.handleUpdate(details.previousVersion);\n          break;\n      }\n    } catch (error) {\n      console.error('[Comet Platform] Installation handling failed:', error);\n    }\n  }\n\n  async handleFirstInstall() {\n    console.log('[Comet Platform] First installation');\n    await storage.set({\n      installDate: Date.now(),\n      version: this.version,\n      firstInstall: true,\n    });\n  }\n\n  async handleUpdate(previousVersion) {\n    console.log(\n      `[Comet Platform] Updated from ${previousVersion} to ${this.version}`\n    );\n    await storage.set({\n      lastUpdate: Date.now(),\n      version: this.version,\n      previousVersion,\n    });\n  }\n\n  async handleMessage(message, sender, sendResponse) {\n    try {\n      const { type, data, id } = message;\n\n      if (!type) {\n        sendResponse({ success: false, error: 'Message type required' });\n        return;\n      }\n\n      console.log(`[Comet Platform] Message received: ${type}`, data);\n\n      const handler = this.messageHandlers.get(type);\n      if (!handler) {\n        sendResponse({\n          success: false,\n          error: `No handler for message type: ${type}`,\n          availableHandlers: Array.from(this.messageHandlers.keys()),\n        });\n        return;\n      }\n\n      // Execute handler\n      const result = await handler(data, sender);\n\n      // Always wrap in success response format\n      sendResponse({\n        success: true,\n        data: result,\n        id,\n      });\n    } catch (error) {\n      console.error('[Comet Platform] Message handling error:', error);\n      sendResponse({\n        success: false,\n        error: error.message || 'Internal error',\n        id: message.id,\n      });\n    }\n  }\n\n  registerMessageHandler(type, handler) {\n    this.messageHandlers.set(type, handler);\n  }\n\n  getExtensionInfo() {\n    return {\n      id: this.extensionId,\n      version: this.version,\n      manifest: this.api.runtime.getManifest(),\n      initialized: this.isInitialized,\n      browser: this.getBrowserInfo(),\n    };\n  }\n\n  getBrowserInfo() {\n    if (typeof browser !== 'undefined') {\n      return { type: 'firefox', api: 'browser' };\n    } else if (typeof chrome !== 'undefined') {\n      return { type: 'chromium', api: 'chrome' };\n    }\n    return { type: 'unknown', api: 'unknown' };\n  }\n}\n\n// Initialize the Comet service worker manager\nconst serviceWorkerManager = new CometServiceWorkerManager();\n\n// Export for app usage\nglobalThis.serviceWorkerManager = serviceWorkerManager;\nexport { serviceWorkerManager };\n"],"names":["browserAPI","CometServiceWorkerManager","details","message","sender","sendResponse","error","data","storage","options","url","method","headers","body","timeout","controller","timeoutId","fetchOptions","response","contentType","previousVersion","type","id","handler","result","serviceWorkerManager"],"mappings":"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"}
const w="modulepreload",p=function(c){return"/"+c},h={},y=function(e,t,r){let a=Promise.resolve();if(t&&t.length>0){let l=function(o){return Promise.all(o.map(u=>Promise.resolve(u).then(d=>({status:"fulfilled",value:d}),d=>({status:"rejected",reason:d}))))};document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),f=i?.nonce||i?.getAttribute("nonce");a=l(t.map(o=>{if(o=p(o),o in h)return;h[o]=!0;const u=o.endsWith(".css"),d=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${o}"]${d}`))return;const n=document.createElement("link");if(n.rel=u?"stylesheet":w,u||(n.as="script"),n.crossOrigin="",n.href=o,f&&n.setAttribute("nonce",f),document.head.appendChild(n),u)return new Promise((g,m)=>{n.addEventListener("load",g),n.addEventListener("error",()=>m(new Error(`Unable to preload CSS for ${o}`)))})}))}function s(l){const i=new Event("vite:preloadError",{cancelable:!0});if(i.payload=l,window.dispatchEvent(i),!i.defaultPrevented)throw l}return a.then(l=>{for(const i of l||[])i.status==="rejected"&&s(i.reason);return e().catch(s)})},S=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class C{constructor(){this.api=S,this.defaults={},this.defaultsLoaded=!1,this.isInitialized=!1,this.initialize()}async initialize(){if(!this.isInitialized)try{await this.loadDefaults(),await this.initializeDefaults(),this.isInitialized=!0,console.log("[Comet Storage] Initialized with defaults")}catch{console.warn("[Comet Storage] No defaults found, continuing without defaults"),this.defaults={},this.defaultsLoaded=!0,this.isInitialized=!0}}async loadDefaults(){if(!this.defaultsLoaded)try{const{default:e}=await y(async()=>{const{default:t}=await import("./defaults-DXuVO4ek.js");return{default:t}},[]);this.defaults=e||{},this.defaultsLoaded=!0,console.log("[Comet Storage] Loaded defaults from defaults.js:",Object.keys(this.defaults))}catch(e){console.warn("[Comet Storage] Failed to load defaults.js:",e),this.defaults={},this.defaultsLoaded=!0}}async initializeDefaults(){try{console.log("[Comet Storage] Reloading defaults on extension startup"),Object.keys(this.defaults).length>0?(await this.api.storage.sync.set(this.defaults),console.log("[Comet Storage] All defaults applied in batch:",Object.keys(this.defaults))):console.log("[Comet Storage] No defaults to apply"),await this.api.storage.local.set({_defaultsInitialized:!0})}catch(e){console.warn("[Comet Storage] Failed to initialize defaults:",e)}}async get(e,t=void 0){try{if(await this.initialize(),typeof e=="string"){const r=await this.api.storage.sync.get(e);return r[e]!==void 0?r[e]:this.defaults[e]!==void 0?this.defaults[e]:t}if(Array.isArray(e)){const r=await this.api.storage.sync.get(e),a={};for(const s of e)r[s]!==void 0?a[s]=r[s]:this.defaults[s]!==void 0?a[s]=this.defaults[s]:a[s]=void 0;return a}if(e===null){const r=await this.api.storage.sync.get(null),a={...this.defaults};return Object.assign(a,r),delete a._defaultsInitialized,a}return t}catch(r){throw console.error("[Comet Storage] Get operation failed:",r),new Error("Failed to read from storage: "+r.message)}}async set(e,t=void 0){try{return await this.initialize(),typeof e=="string"?(await this.api.storage.sync.set({[e]:t}),!0):typeof e=="object"&&e!==null?(await this.api.storage.sync.set(e),!0):!1}catch(r){throw console.error("[Comet Storage] Set operation failed:",r),new Error("Failed to write to storage: "+r.message)}}async remove(e){try{return await this.api.storage.sync.remove(e),!0}catch(t){throw console.error("[Comet Storage] Remove operation failed:",t),new Error("Failed to remove from storage: "+t.message)}}async clear(){try{return await this.api.storage.sync.clear(),await this.api.storage.local.clear(),!0}catch(e){throw console.error("[Comet Storage] Clear operation failed:",e),new Error("Failed to clear storage: "+e.message)}}async has(e){try{return await this.get(e)!==void 0}catch{return!1}}onChange(e){const t=(r,a)=>{e(r,a)};return this.api.storage.onChanged.addListener(t),()=>{this.api.storage.onChanged.removeListener(t)}}getDefaults(){return JSON.parse(JSON.stringify(this.defaults))}async reloadDefaults(){try{return this.defaultsLoaded=!1,this.isInitialized=!1,this.defaults={},await this.initialize(),console.log("[Comet Storage] Defaults reloaded manually"),!0}catch(e){return console.error("[Comet Storage] Failed to reload defaults:",e),!1}}}const v=new C;export{y as _,v as s};
//# sourceMappingURL=storage-BLOHu4CK.js.map

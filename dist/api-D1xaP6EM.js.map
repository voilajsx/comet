{"version":3,"file":"api-D1xaP6EM.js","sources":["../src/platform/api.ts"],"sourcesContent":["/**\n * Comet Framework - Universal API utilities (CROSS-BROWSER FIXED)\n * Clean API proxy that works from any extension context\n * @module @voilajsx/comet\n * @file src/platform/api.ts\n */\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser; // Firefox, newer browsers\n  } else if (typeof chrome !== 'undefined') {\n    return chrome; // Chrome, Edge, Opera, Brave\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n// Type definitions\ninterface FetchOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: string | object | null;\n  timeout?: number;\n}\n\ninterface ApiResponse {\n  ok: boolean;\n  status: number;\n  data?: any;\n  error?: string;\n  json(): Promise<any>;\n}\n\ninterface RuntimeMessage {\n  type: string;\n  data: {\n    url: string;\n    method: string;\n    headers: Record<string, string>;\n    body: string | null;\n    timeout: number;\n  };\n}\n\n// 🔧 FIXED: Update to match service worker's actual response\ninterface ServiceWorkerResponse {\n  success: boolean;\n  data: {\n    success: boolean;\n    status: number;\n    statusText: string;\n    data: any;\n    headers: Record<string, string>;\n    error?: string;\n    isTimeout?: boolean;\n    isNetworkError?: boolean;\n    isCorsError?: boolean;\n  };\n  id?: number;\n  error?: string;\n}\n\n/**\n * Universal API utilities that work from any extension context\n * Routes through service worker to avoid CORS issues - CROSS-BROWSER COMPATIBLE\n */\nexport const comet = {\n  /**\n   * Base fetch method - CROSS-BROWSER with Promise-based messaging\n   */\n  async fetch(url: string, options: FetchOptions = {}): Promise<ApiResponse> {\n    try {\n      const response = await new Promise<ServiceWorkerResponse>((resolve, reject) => {\n        const message: RuntimeMessage = {\n          type: 'api.fetch',\n          data: {\n            url,\n            method: options.method || 'GET',\n            headers: options.headers || {},\n            body: options.body ? (typeof options.body === 'string' ? options.body : JSON.stringify(options.body)) : null,\n            timeout: options.timeout || 30000,\n          },\n        };\n\n        // Cross-browser message sending\n        if (browserAPI.runtime.sendMessage.length > 1) {\n          // Chrome-style callback API\n          browserAPI.runtime.sendMessage(message, (response: ServiceWorkerResponse) => {\n            if (browserAPI.runtime.lastError) {\n              reject(new Error(browserAPI.runtime.lastError.message || 'Unknown runtime error'));\n            } else {\n              resolve(response);\n            }\n          });\n        } else {\n          // Firefox-style Promise API\n          (browserAPI.runtime.sendMessage(message) as Promise<ServiceWorkerResponse>)\n            .then(resolve)\n            .catch((error: unknown) => {\n              reject(new Error(error instanceof Error ? error.message : 'Unknown runtime error'));\n            });\n        }\n      });\n\n      // 🔧 FIXED: Handle the service worker's wrapped response correctly\n      if (response.success && response.data) {\n        // Extract the actual fetch response from service worker wrapper\n        const fetchResult = response.data;\n        \n        return {\n          ok: fetchResult.success,\n          status: fetchResult.status,\n          json: () => Promise.resolve(fetchResult.data),\n          data: fetchResult.data, // ← Direct access to actual API data\n          error: fetchResult.error,\n        };\n      } else {\n        // Service worker level error\n        return {\n          ok: false,\n          status: 0,\n          error: response.error || 'Service worker error',\n          json: () => Promise.reject(new Error(response.error || 'Service worker error')),\n        };\n      }\n    } catch (error: unknown) {\n      return {\n        ok: false,\n        status: 0,\n        error: error instanceof Error ? error.message : String(error),\n        json: () => Promise.reject(error),\n      };\n    }\n  },\n\n  /**\n   * REST convenience methods\n   */\n  async get(url: string, headers: Record<string, string> = {}): Promise<ApiResponse> {\n    return this.fetch(url, { method: 'GET', headers });\n  },\n\n  async post(url: string, data: string | object | null = null, headers: Record<string, string> = {}): Promise<ApiResponse> {\n    return this.fetch(url, {\n      method: 'POST',\n      body: data,\n      headers,\n    });\n  },\n\n  async put(url: string, data: string | object | null = null, headers: Record<string, string> = {}): Promise<ApiResponse> {\n    return this.fetch(url, {\n      method: 'PUT',\n      body: data,\n      headers,\n    });\n  },\n\n  async patch(url: string, data: string | object | null = null, headers: Record<string, string> = {}): Promise<ApiResponse> {\n    return this.fetch(url, {\n      method: 'PATCH',\n      body: data,\n      headers,\n    });\n  },\n\n  async delete(url: string, headers: Record<string, string> = {}): Promise<ApiResponse> {\n    return this.fetch(url, { method: 'DELETE', headers });\n  },\n};"],"names":["browserAPI","comet","url","options","response","resolve","reject","message","error","fetchResult","headers","data"],"mappings":"AAQA,MAAMA,GAAc,IAAM,CACpB,GAAA,OAAO,QAAY,IACd,OAAA,QACT,GAAW,OAAO,OAAW,IACpB,OAAA,OAED,MAAA,IAAI,MAAM,oCAAoC,CAExD,GAAG,EAmDUC,EAAQ,CAInB,MAAM,MAAMC,EAAaC,EAAwB,GAA0B,CACrE,GAAA,CACF,MAAMC,EAAW,MAAM,IAAI,QAA+B,CAACC,EAASC,IAAW,CAC7E,MAAMC,EAA0B,CAC9B,KAAM,YACN,KAAM,CACJ,IAAAL,EACA,OAAQC,EAAQ,QAAU,MAC1B,QAASA,EAAQ,SAAW,CAAC,EAC7B,KAAMA,EAAQ,KAAQ,OAAOA,EAAQ,MAAS,SAAWA,EAAQ,KAAO,KAAK,UAAUA,EAAQ,IAAI,EAAK,KACxG,QAASA,EAAQ,SAAW,GAAA,CAEhC,EAGIH,EAAW,QAAQ,YAAY,OAAS,EAE1CA,EAAW,QAAQ,YAAYO,EAAUH,GAAoC,CACvEJ,EAAW,QAAQ,UACrBM,EAAO,IAAI,MAAMN,EAAW,QAAQ,UAAU,SAAW,uBAAuB,CAAC,EAEjFK,EAAQD,CAAQ,CAClB,CACD,EAGAJ,EAAW,QAAQ,YAAYO,CAAO,EACpC,KAAKF,CAAO,EACZ,MAAOG,GAAmB,CACzBF,EAAO,IAAI,MAAME,aAAiB,MAAQA,EAAM,QAAU,uBAAuB,CAAC,CAAA,CACnF,CACL,CACD,EAGG,GAAAJ,EAAS,SAAWA,EAAS,KAAM,CAErC,MAAMK,EAAcL,EAAS,KAEtB,MAAA,CACL,GAAIK,EAAY,QAChB,OAAQA,EAAY,OACpB,KAAM,IAAM,QAAQ,QAAQA,EAAY,IAAI,EAC5C,KAAMA,EAAY,KAClB,MAAOA,EAAY,KACrB,CAAA,KAGO,OAAA,CACL,GAAI,GACJ,OAAQ,EACR,MAAOL,EAAS,OAAS,uBACzB,KAAM,IAAM,QAAQ,OAAO,IAAI,MAAMA,EAAS,OAAS,sBAAsB,CAAC,CAChF,QAEKI,EAAgB,CAChB,MAAA,CACL,GAAI,GACJ,OAAQ,EACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,KAAM,IAAM,QAAQ,OAAOA,CAAK,CAClC,CAAA,CAEJ,EAKA,MAAM,IAAIN,EAAaQ,EAAkC,GAA0B,CACjF,OAAO,KAAK,MAAMR,EAAK,CAAE,OAAQ,MAAO,QAAAQ,EAAS,CACnD,EAEA,MAAM,KAAKR,EAAaS,EAA+B,KAAMD,EAAkC,CAAA,EAA0B,CAChH,OAAA,KAAK,MAAMR,EAAK,CACrB,OAAQ,OACR,KAAMS,EACN,QAAAD,CAAA,CACD,CACH,EAEA,MAAM,IAAIR,EAAaS,EAA+B,KAAMD,EAAkC,CAAA,EAA0B,CAC/G,OAAA,KAAK,MAAMR,EAAK,CACrB,OAAQ,MACR,KAAMS,EACN,QAAAD,CAAA,CACD,CACH,EAEA,MAAM,MAAMR,EAAaS,EAA+B,KAAMD,EAAkC,CAAA,EAA0B,CACjH,OAAA,KAAK,MAAMR,EAAK,CACrB,OAAQ,QACR,KAAMS,EACN,QAAAD,CAAA,CACD,CACH,EAEA,MAAM,OAAOR,EAAaQ,EAAkC,GAA0B,CACpF,OAAO,KAAK,MAAMR,EAAK,CAAE,OAAQ,SAAU,QAAAQ,EAAS,CAAA,CAExD"}
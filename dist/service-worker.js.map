{"version":3,"file":"service-worker.js","sources":["../src/platform/service-worker.ts"],"sourcesContent":["/**\n * Comet Framework - Essential Service Worker (Fixed API Version)\n * @module @voilajsx/comet\n * @file src/platform/service-worker.ts\n */\n\nimport { storage } from './storage.ts';\n\n// Type definitions\ninterface MessageHandler {\n  (data: any, sender?: chrome.runtime.MessageSender): Promise<any> | any;\n}\n\ninterface InstallDetails {\n  reason: chrome.runtime.OnInstalledReason;\n  previousVersion?: string;\n  id?: string;\n}\n\ninterface MessageRequest {\n  type: string;\n  data?: any;\n  id?: number;\n  timestamp?: number;\n}\n\ninterface MessageResponse {\n  success: boolean;\n  data?: any;\n  error?: string;\n  id?: number;\n  availableHandlers?: string[];\n}\n\ninterface FetchRequestData {\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n  body: string | null;\n  timeout: number;\n}\n\ninterface FetchResponse {\n  success: boolean;\n  status: number;\n  statusText: string;\n  data: any;\n  headers: Record<string, string>;\n  error?: string;\n  isTimeout?: boolean;\n  isNetworkError?: boolean;\n  isCorsError?: boolean;\n}\n\ninterface ExtensionInfo {\n  id: string;\n  version: string;\n  manifest: chrome.runtime.Manifest;\n  initialized: boolean;\n  browser: BrowserInfo;\n}\n\ninterface BrowserInfo {\n  type: string;\n  api: string;\n}\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser;\n  } else if (typeof chrome !== 'undefined') {\n    return chrome;\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Essential Comet Service Worker Manager\n * Only the core features most extensions actually need\n */\nclass CometServiceWorkerManager {\n  private api: typeof chrome | typeof browser;\n  private extensionId: string;\n  private version: string;\n  private messageHandlers: Map<string, MessageHandler>;\n  private isInitialized: boolean;\n\n  constructor() {\n    this.api = browserAPI;\n    this.extensionId = this.api.runtime.id;\n    this.version = this.api.runtime.getManifest().version;\n    this.messageHandlers = new Map();\n    this.isInitialized = false;\n\n    this.setupEventListeners();\n    this.initialize();\n  }\n\n  setupEventListeners(): void {\n    // Extension lifecycle\n    this.api.runtime.onInstalled.addListener((details: InstallDetails) => {\n      this.handleInstallation(details);\n    });\n\n    // Message handling\n    this.api.runtime.onMessage.addListener((message: MessageRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: any) => void) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // Keep message channel open for async responses\n    });\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    console.log(`[Comet Platform] Service worker v${this.version} initialized`);\n\n    try {\n      this.setupDefaultHandlers();\n      this.isInitialized = true;\n    } catch (error: unknown) {\n      console.error(\n        '[Comet Platform] Service worker initialization failed:',\n        error\n      );\n    }\n  }\n\n  setupDefaultHandlers(): void {\n    // Storage operations - proxy to storage utility\n    this.registerMessageHandler('storage.get', async (data: any) => {\n      return await storage.get(data.keys, data.fallback);\n    });\n\n    this.registerMessageHandler('storage.set', async (data: any) => {\n      return await storage.set(data.items || data);\n    });\n\n    this.registerMessageHandler('storage.remove', async (data: any) => {\n      return await storage.remove(data.keys);\n    });\n\n    this.registerMessageHandler('storage.clear', async () => {\n      return await storage.clear();\n    });\n\n    // Basic tabs operations - most common needs\n    this.registerMessageHandler('tabs.query', async (data: any) => {\n      try {\n        const tabs = await this.api.tabs.query(data || {});\n        return tabs; // Return tabs directly\n      } catch (error: unknown) {\n        throw error;\n      }\n    });\n\n    this.registerMessageHandler('tabs.getCurrent', async () => {\n      try {\n        const tabs = await this.api.tabs.query({\n          active: true,\n          currentWindow: true,\n        });\n        return tabs[0] || null;\n      } catch (error: unknown) {\n        throw error;\n      }\n    });\n\n    // Badge operations - very common for status display\n    this.registerMessageHandler('badge.setText', async (data: any) => {\n      try {\n        if (!this.api.action) return false;\n\n        const options: chrome.action.BadgeTextDetails = { text: String(data.text || '') };\n        if (data.tabId) options.tabId = data.tabId;\n\n        await this.api.action.setBadgeText(options);\n        return true;\n      } catch (error: unknown) {\n        console.error('[Comet Platform] Badge setText failed:', error);\n        return false;\n      }\n    });\n\n    this.registerMessageHandler('badge.setColor', async (data: any) => {\n      try {\n        if (!this.api.action) return false;\n\n        const options: chrome.action.BadgeBackgroundColorDetails = { color: data.color };\n        if (data.tabId) options.tabId = data.tabId;\n\n        await this.api.action.setBadgeBackgroundColor(options);\n        return true;\n      } catch (error: unknown) {\n        console.error('[Comet Platform] Badge setColor failed:', error);\n        return false;\n      }\n    });\n\n    // Universal API proxy - solves CORS issues (SIMPLE VERSION)\n    this.registerMessageHandler('api.fetch', async (data: FetchRequestData) => {\n      return await this.universalApiFetch(data);\n    });\n\n    // Extension info\n    this.registerMessageHandler('extension.getInfo', async () => {\n      return {\n        id: this.extensionId,\n        version: this.version,\n        manifest: this.api.runtime.getManifest(),\n      };\n    });\n  }\n\n  /**\n   * Proper Universal API fetch handler with CORS and detailed logging\n   */\n  async universalApiFetch({\n    url,\n    method = 'GET',\n    headers = {},\n    body = null,\n    timeout = 15000,\n  }: FetchRequestData): Promise<FetchResponse> {\n    console.log(`[API] üöÄ Starting ${method} ${url}`);\n    console.log(`[API] üìã Headers:`, headers);\n    console.log(`[API] üì¶ Body:`, body);\n\n    let controller: AbortController | null = null;\n    let timeoutId: number | null = null;\n\n    try {\n      // Create abort controller for timeout\n      controller = new AbortController();\n\n      // Set up timeout\n      timeoutId = setTimeout(() => {\n        console.log(`[API] ‚è∞ Request timeout after ${timeout}ms`);\n        controller!.abort();\n      }, timeout);\n\n      // CORS-friendly headers\n      const fetchOptions: RequestInit = {\n        method: method.toUpperCase(),\n        headers: {\n          // Essential headers for CORS\n          Accept: 'application/json, text/plain, */*',\n          'Cache-Control': 'no-cache',\n\n          // Only add Content-Type for body requests to avoid preflight\n          ...(body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n\n          // User provided headers (can override defaults)\n          ...headers,\n        },\n        signal: controller.signal,\n        mode: 'cors',\n        credentials: 'omit', // No credentials to avoid preflight\n        redirect: 'follow',\n      };\n\n      // Add body for POST/PUT/PATCH\n      if (body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n        fetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);\n      }\n\n      console.log(`[API] üîß Fetch options:`, fetchOptions);\n\n      // Make the request\n      const response = await fetch(url, fetchOptions);\n\n      // Clear timeout on success\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n\n      console.log(`[API] üì° Response received:`);\n      console.log(`[API] üìä Status: ${response.status} ${response.statusText}`);\n      console.log(\n        `[API] üìã Response Headers:`,\n        Object.fromEntries(response.headers.entries())\n      );\n      console.log(`[API] ‚úÖ OK: ${response.ok}`);\n\n      // Read response\n      const text = await response.text();\n      console.log(`[API] üìñ Response body length: ${text.length} characters`);\n      console.log(\n        `[API] üìÑ Response preview (first 200 chars):`,\n        text.substring(0, 200)\n      );\n\n      // Try to parse as JSON\n      let data: any = text;\n      try {\n        data = JSON.parse(text);\n        console.log(`[API] üéØ Successfully parsed as JSON`);\n        console.log(\n          `[API] üìä JSON structure:`,\n          typeof data,\n          Array.isArray(data) ? `Array[${data.length}]` : 'Object'\n        );\n\n        // Log first level keys if it's an object\n        if (typeof data === 'object' && data !== null && !Array.isArray(data)) {\n          console.log(`[API] üîë Object keys:`, Object.keys(data));\n        }\n      } catch (parseError: unknown) {\n        console.log(\n          `[API] üìù Keeping as text (not valid JSON):`,\n          parseError instanceof Error ? parseError.message : String(parseError)\n        );\n      }\n\n      const result: FetchResponse = {\n        success: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        data: data,\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n\n      console.log(`[API] ‚úÖ Final result:`, {\n        success: result.success,\n        status: result.status,\n        dataType: typeof result.data,\n        hasData: !!result.data,\n      });\n\n      return result;\n    } catch (error: unknown) {\n      // Clean up timeout\n      if (timeoutId) clearTimeout(timeoutId);\n\n      console.error(`[API] ‚ùå Error occurred:`, error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorName = error instanceof Error ? error.name : 'Unknown';\n      console.error(`[API] üìõ Error name: ${errorName}`);\n      console.error(`[API] üìõ Error message: ${errorMessage}`);\n\n      // Determine error type\n      const isTimeout = errorName === 'AbortError';\n      const isNetworkError =\n        errorMessage.includes('fetch') ||\n        errorMessage.includes('Failed to fetch');\n      const isCorsError =\n        errorMessage.includes('CORS') ||\n        errorMessage.includes('cross-origin');\n\n      console.log(`[API] üîç Error analysis:`);\n      console.log(`[API] ‚è∞ Is timeout: ${isTimeout}`);\n      console.log(`[API] üåê Is network error: ${isNetworkError}`);\n      console.log(`[API] üö´ Is CORS error: ${isCorsError}`);\n\n      const result: FetchResponse = {\n        success: false,\n        error: errorMessage,\n        isTimeout,\n        isNetworkError,\n        isCorsError,\n        status: 0,\n        statusText: '',\n        data: null,\n        headers: {},\n      };\n\n      console.log(`[API] ‚ùå Error result:`, result);\n      return result;\n    }\n  }\n\n  async handleInstallation(details: InstallDetails): Promise<void> {\n    console.log(`[Comet Platform] Installation event: ${details.reason}`);\n\n    try {\n      switch (details.reason) {\n        case 'install':\n          await this.handleFirstInstall();\n          break;\n        case 'update':\n          await this.handleUpdate(details.previousVersion);\n          break;\n      }\n    } catch (error: unknown) {\n      console.error('[Comet Platform] Installation handling failed:', error);\n    }\n  }\n\n  async handleFirstInstall(): Promise<void> {\n    console.log('[Comet Platform] First installation');\n    await storage.set({\n      installDate: Date.now(),\n      version: this.version,\n      firstInstall: true,\n    });\n  }\n\n  async handleUpdate(previousVersion?: string): Promise<void> {\n    console.log(\n      `[Comet Platform] Updated from ${previousVersion} to ${this.version}`\n    );\n    await storage.set({\n      lastUpdate: Date.now(),\n      version: this.version,\n      previousVersion,\n    });\n  }\n\n  async handleMessage(message: MessageRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: any) => void): Promise<void> {\n    try {\n      const { type, data, id } = message;\n\n      if (!type) {\n        sendResponse({ success: false, error: 'Message type required' });\n        return;\n      }\n\n      console.log(`[Comet Platform] Message received: ${type}`, data);\n\n      const handler = this.messageHandlers.get(type);\n      if (!handler) {\n        sendResponse({\n          success: false,\n          error: `No handler for message type: ${type}`,\n          availableHandlers: Array.from(this.messageHandlers.keys()),\n        });\n        return;\n      }\n\n      // Execute handler\n      const result = await handler(data, sender);\n\n      // Always wrap in success response format\n      sendResponse({\n        success: true,\n        data: result,\n        id,\n      });\n    } catch (error: unknown) {\n      console.error('[Comet Platform] Message handling error:', error);\n      sendResponse({\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal error',\n        id: message.id,\n      });\n    }\n  }\n\n  registerMessageHandler(type: string, handler: MessageHandler): void {\n    this.messageHandlers.set(type, handler);\n  }\n\n  getExtensionInfo(): ExtensionInfo {\n    return {\n      id: this.extensionId,\n      version: this.version,\n      manifest: this.api.runtime.getManifest(),\n      initialized: this.isInitialized,\n      browser: this.getBrowserInfo(),\n    };\n  }\n\n  getBrowserInfo(): BrowserInfo {\n    if (typeof browser !== 'undefined') {\n      return { type: 'firefox', api: 'browser' };\n    } else if (typeof chrome !== 'undefined') {\n      return { type: 'chromium', api: 'chrome' };\n    }\n    return { type: 'unknown', api: 'unknown' };\n  }\n}\n\n// Initialize the Comet service worker manager\nconst serviceWorkerManager = new CometServiceWorkerManager();\n\n// Export for app usage\nglobalThis.serviceWorkerManager = serviceWorkerManager;\nexport { serviceWorkerManager };"],"names":["browserAPI","CometServiceWorkerManager","details","message","sender","sendResponse","error","data","storage","options","url","method","headers","body","timeout","controller","timeoutId","fetchOptions","response","text","parseError","result","errorMessage","errorName","isTimeout","isNetworkError","isCorsError","previousVersion","type","id","handler","serviceWorkerManager"],"mappings":"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"}
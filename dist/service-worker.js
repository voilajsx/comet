import{s as o}from"./storage-DwfbqBlG.js";const g=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class f{constructor(){this.api=g,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onMessage.addListener((e,t,s)=>(this.handleMessage(e,t,s),!0))}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Service worker v${this.version} initialized`);try{this.setupDefaultHandlers(),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Service worker initialization failed:",e)}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await o.get(e.keys,e.fallback)),this.registerMessageHandler("storage.set",async e=>await o.set(e.items||e)),this.registerMessageHandler("storage.remove",async e=>await o.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await o.clear()),this.registerMessageHandler("tabs.query",async e=>{try{return await this.api.tabs.query(e||{})}catch(t){throw t}}),this.registerMessageHandler("tabs.getCurrent",async()=>{try{return(await this.api.tabs.query({active:!0,currentWindow:!0}))[0]||null}catch(e){throw e}}),this.registerMessageHandler("badge.setText",async e=>{try{if(!this.api.action)return!1;const t={text:String(e.text||"")};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeText(t),!0}catch(t){return console.error("[Comet Platform] Badge setText failed:",t),!1}}),this.registerMessageHandler("badge.setColor",async e=>{try{if(!this.api.action)return!1;const t={color:e.color};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeBackgroundColor(t),!0}catch(t){return console.error("[Comet Platform] Badge setColor failed:",t),!1}}),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e)),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()}))}async universalApiFetch({url:e,method:t="GET",headers:s={},body:r=null,timeout:l=3e4}){try{const a=new AbortController,c=setTimeout(()=>a.abort(),l),h={method:t.toUpperCase(),headers:{...r&&["POST","PUT","PATCH"].includes(t.toUpperCase())?{"Content-Type":"application/json"}:{},...s},signal:a.signal};r&&["POST","PUT","PATCH"].includes(t.toUpperCase())&&(h.body=JSON.stringify(r)),console.log(`[Comet API] ${t.toUpperCase()} ${e}`);const n=await fetch(e,h);clearTimeout(c);let i;const u=n.headers.get("content-type");try{if(u&&u.includes("application/json"))i=await n.json();else if(i=await n.text(),i.trim().startsWith("{")||i.trim().startsWith("["))try{i=JSON.parse(i)}catch{}}catch(d){console.warn("[Comet API] Failed to parse response body:",d),i=null}return{success:n.ok,status:n.status,statusText:n.statusText,data:i,headers:Object.fromEntries(n.headers.entries())}}catch(a){return console.error("[Comet API] Request failed:",a),{success:!1,error:a.message,isTimeout:a.name==="AbortError",status:0,data:null,headers:{}}}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break}}catch(t){console.error("[Comet Platform] Installation handling failed:",t)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await o.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await o.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleMessage(e,t,s){try{const{type:r,data:l,id:a}=e;if(!r){s({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${r}`,l);const c=this.messageHandlers.get(r);if(!c){s({success:!1,error:`No handler for message type: ${r}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const h=await c(l,t);s({success:!0,data:h,id:a})}catch(r){console.error("[Comet Platform] Message handling error:",r),s({success:!1,error:r.message||"Internal error",id:e.id})}}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const p=new f;globalThis.serviceWorkerManager=p;
//# sourceMappingURL=service-worker.js.map

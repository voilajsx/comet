import{s as l}from"./storage-CVg25cfU.js";const p=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class m{api;extensionId;version;messageHandlers;isInitialized;constructor(){this.api=p,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onMessage.addListener((e,t,n)=>(this.handleMessage(e,t,n),!0))}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Service worker v${this.version} initialized`);try{this.setupDefaultHandlers(),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Service worker initialization failed:",e)}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await l.get(e.keys,e.fallback)),this.registerMessageHandler("storage.set",async e=>await l.set(e.items||e)),this.registerMessageHandler("storage.remove",async e=>await l.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await l.clear()),this.registerMessageHandler("tabs.query",async e=>{try{return await this.api.tabs.query(e||{})}catch(t){throw t}}),this.registerMessageHandler("tabs.getCurrent",async()=>{try{return(await this.api.tabs.query({active:!0,currentWindow:!0}))[0]||null}catch(e){throw e}}),this.registerMessageHandler("badge.setText",async e=>{try{if(!this.api.action)return!1;const t={text:String(e.text||"")};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeText(t),!0}catch(t){return console.error("[Comet Platform] Badge setText failed:",t),!1}}),this.registerMessageHandler("badge.setColor",async e=>{try{if(!this.api.action)return!1;const t={color:e.color};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeBackgroundColor(t),!0}catch(t){return console.error("[Comet Platform] Badge setColor failed:",t),!1}}),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e)),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()}))}async universalApiFetch({url:e,method:t="GET",headers:n={},body:s=null,timeout:c=15e3}){console.log(`[API] üöÄ Starting ${t} ${e}`);let u=null,i=null;try{u=new AbortController,i=setTimeout(()=>{console.log(`[API] ‚è∞ Request timeout after ${c}ms`),u.abort()},c);const a={method:t.toUpperCase(),headers:{Accept:"application/json, text/plain, */*","Cache-Control":"no-cache",...s&&["POST","PUT","PATCH"].includes(t.toUpperCase())?{"Content-Type":"application/json"}:{},...n},signal:u.signal,mode:"cors",credentials:"omit",redirect:"follow"};s&&["POST","PUT","PATCH"].includes(t.toUpperCase())&&(a.body=typeof s=="string"?s:JSON.stringify(s));const r=await fetch(e,a);i&&(clearTimeout(i),i=null),console.log(`[API] üì° Response: ${r.status} ${r.statusText}`);const h=await r.text();console.log(`[API] üìñ Response length: ${h.length} characters`);let d=h;try{d=JSON.parse(h),console.log("[API] üéØ Successfully parsed as JSON")}catch{console.log("[API] üìù Keeping as text (not valid JSON)")}const o={success:r.ok,status:r.status,statusText:r.statusText,data:d,headers:Object.fromEntries(r.headers.entries())};return console.log("[API] ‚úÖ Clean result:",{success:o.success,status:o.status,dataType:typeof o.data}),o}catch(a){i&&clearTimeout(i),console.error("[API] ‚ùå Error:",a);const r=a instanceof Error?a.message:String(a),d=(a instanceof Error?a.name:"Unknown")==="AbortError",o=r.includes("fetch")||r.includes("Failed to fetch"),g=r.includes("CORS")||r.includes("cross-origin"),f={success:!1,error:r,isTimeout:d,isNetworkError:o,isCorsError:g,status:0,statusText:"",data:null,headers:{}};return console.log("[API] ‚ùå Error result:",f),f}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break}}catch(t){console.error("[Comet Platform] Installation handling failed:",t)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await l.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await l.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleMessage(e,t,n){try{const{type:s,data:c,id:u}=e;if(!s){n({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${s}`,c);const i=this.messageHandlers.get(s);if(!i){n({success:!1,error:`No handler for message type: ${s}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const a=await i(c,t);n({success:!0,data:a,id:u})}catch(s){console.error("[Comet Platform] Message handling error:",s),n({success:!1,error:s instanceof Error?s.message:"Internal error",id:e.id})}}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const y=new m;globalThis.serviceWorkerManager=y;
//# sourceMappingURL=service-worker.js.map

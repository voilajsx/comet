import{s as c,m as p}from"./messaging-CQ-fz_cX.js";const f=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class m{constructor(){this.api=f,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.eventListeners=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onStartup.addListener(()=>{this.handleStartup()}),this.api.runtime.onMessage.addListener((e,t,s)=>(this.handleMessage(e,t,s),!0)),this.api.tabs.onUpdated.addListener((e,t,s)=>{this.emitEvent("tabUpdated",{tabId:e,changeInfo:t,tab:s})}),this.api.tabs.onActivated.addListener(e=>{this.emitEvent("tabActivated",e)}),this.api.storage.onChanged.addListener((e,t)=>{this.emitEvent("storageChanged",{changes:e,namespace:t})}),this.api.action&&this.api.action.onClicked&&this.api.action.onClicked.addListener(e=>{this.emitEvent("actionClicked",{tab:e})})}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Background service worker v${this.version} initialized`);try{await this.loadAppConfig(),this.setupDefaultHandlers(),this.emitEvent("backgroundReady",{version:this.version,extensionId:this.extensionId}),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Background initialization failed:",e)}}}async loadAppConfig(){try{const e=await c.get("appConfig");this.appConfig=e||{},this.appConfig.messageHandlers&&this.registerMessageHandlers(this.appConfig.messageHandlers)}catch{console.warn("[Comet Platform] No app config found, using defaults"),this.appConfig={}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await c.get(e.keys)),this.registerMessageHandler("storage.set",async e=>await c.set(e.items)),this.registerMessageHandler("storage.remove",async e=>await c.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await c.clear()),this.registerMessageHandler("tabs.getCurrent",async()=>{const[e]=await this.api.tabs.query({active:!0,currentWindow:!0});return e}),this.registerMessageHandler("tabs.sendMessage",async e=>await p.sendToTab(e.tabId,e.message)),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()})),this.registerMessageHandler("badge.setText",async e=>await this.setBadgeText(e.text,e.tabId)),this.registerMessageHandler("badge.setColor",async e=>await this.setBadgeColor(e.color,e.tabId)),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e))}async universalApiFetch({url:e,method:t="GET",headers:s={},body:a=null,timeout:o=3e4}){try{const r=new AbortController,h=setTimeout(()=>r.abort(),o),l={method:t.toUpperCase(),headers:{...a&&["POST","PUT","PATCH"].includes(t.toUpperCase())?{"Content-Type":"application/json"}:{},...s},signal:r.signal};a&&["POST","PUT","PATCH"].includes(t.toUpperCase())&&(l.body=JSON.stringify(a)),console.log(`[Comet API] ${t.toUpperCase()} ${e}`,{headers:l.headers,body:l.body?JSON.parse(l.body):null});const i=await fetch(e,l);clearTimeout(h);let n;const u=i.headers.get("content-type");try{if(u&&u.includes("application/json"))n=await i.json();else if(n=await i.text(),n.trim().startsWith("{")||n.trim().startsWith("["))try{n=JSON.parse(n)}catch{}}catch(g){console.warn("[Comet API] Failed to parse response body:",g),n=null}const d={success:i.ok,status:i.status,statusText:i.statusText,data:n,headers:Object.fromEntries(i.headers.entries())};return console.log("[Comet API] Response:",{status:d.status,success:d.success,dataType:typeof d.data,hasData:!!d.data}),d}catch(r){return console.error("[Comet API] Request failed:",{url:e,method:t,error:r.message,isTimeout:r.name==="AbortError"}),{success:!1,error:r.message,isTimeout:r.name==="AbortError",status:0,data:null,headers:{}}}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);const t={reason:e.reason,previousVersion:e.previousVersion,timestamp:Date.now(),version:this.version};try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break;case"chrome_update":case"browser_update":await this.handleBrowserUpdate();break}this.emitEvent("installed",t)}catch(s){console.error("[Comet Platform] Installation handling failed:",s)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await c.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await c.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleBrowserUpdate(){console.log("[Comet Platform] Browser updated")}async handleStartup(){console.log("[Comet Platform] Extension startup"),this.emitEvent("startup",{timestamp:Date.now()})}async handleMessage(e,t,s){try{const{type:a,data:o,id:r}=e;if(!a){s({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${a}`,o);const h=this.messageHandlers.get(a);if(!h){const i=await this.emitEvent("message",{type:a,data:o,sender:t});s(i||{success:!1,error:`No handler for message type: ${a}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const l=await h(o,t);s({success:!0,data:l,id:r})}catch(a){console.error("[Comet Platform] Message handling error:",a),s({success:!1,error:a.message||"Internal error",id:e.id})}}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}registerMessageHandlers(e){Object.entries(e).forEach(([t,s])=>{this.registerMessageHandler(t,s)})}addEventListener(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}async emitEvent(e,t){const s=this.eventListeners.get(e)||[];if(s.length===0)return console.log(`[Comet Platform] Event emitted: ${e}`,t),null;let a=null;for(const o of s)try{a=await o(t)}catch(r){console.error(`[Comet Platform] Event listener error for ${e}:`,r)}return a}async setBadgeText(e,t=null){try{if(!this.api.action)return console.warn("[Comet Platform] Badge API not available"),!1;const s={text:String(e)};return t&&(s.tabId=t),await this.api.action.setBadgeText(s),!0}catch(s){return console.error("[Comet Platform] Badge text update failed:",s),!1}}async setBadgeColor(e,t=null){try{if(!this.api.action)return console.warn("[Comet Platform] Badge API not available"),!1;const s={color:e};return t&&(s.tabId=t),await this.api.action.setBadgeBackgroundColor(s),!0}catch(s){return console.error("[Comet Platform] Badge color update failed:",s),!1}}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const y=new m;globalThis.backgroundManager=y;
//# sourceMappingURL=background.js.map

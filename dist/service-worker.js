import{s as u}from"./storage-Bz8_X7E-.js";const f=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class p{constructor(){this.api=f,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onMessage.addListener((e,s,n)=>(this.handleMessage(e,s,n),!0))}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Service worker v${this.version} initialized`);try{this.setupDefaultHandlers(),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Service worker initialization failed:",e)}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await u.get(e.keys,e.fallback)),this.registerMessageHandler("storage.set",async e=>await u.set(e.items||e)),this.registerMessageHandler("storage.remove",async e=>await u.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await u.clear()),this.registerMessageHandler("tabs.query",async e=>{try{return await this.api.tabs.query(e||{})}catch(s){throw s}}),this.registerMessageHandler("tabs.getCurrent",async()=>{try{return(await this.api.tabs.query({active:!0,currentWindow:!0}))[0]||null}catch(e){throw e}}),this.registerMessageHandler("badge.setText",async e=>{try{if(!this.api.action)return!1;const s={text:String(e.text||"")};return e.tabId&&(s.tabId=e.tabId),await this.api.action.setBadgeText(s),!0}catch(s){return console.error("[Comet Platform] Badge setText failed:",s),!1}}),this.registerMessageHandler("badge.setColor",async e=>{try{if(!this.api.action)return!1;const s={color:e.color};return e.tabId&&(s.tabId=e.tabId),await this.api.action.setBadgeBackgroundColor(s),!0}catch(s){return console.error("[Comet Platform] Badge setColor failed:",s),!1}}),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e)),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()}))}async universalApiFetch({url:e,method:s="GET",headers:n={},body:r=null,timeout:g=15e3}){console.log(`[API] 🚀 Starting ${s} ${e}`),console.log("[API] 📋 Headers:",n),console.log("[API] 📦 Body:",r);let h=null,i=null;try{h=new AbortController,i=setTimeout(()=>{console.log(`[API] ⏰ Request timeout after ${g}ms`),h.abort()},g);const t={method:s.toUpperCase(),headers:{Accept:"application/json, text/plain, */*","Cache-Control":"no-cache",...r&&["POST","PUT","PATCH"].includes(s.toUpperCase())?{"Content-Type":"application/json"}:{},...n},signal:h.signal,mode:"cors",credentials:"omit",redirect:"follow"};r&&["POST","PUT","PATCH"].includes(s.toUpperCase())&&(t.body=typeof r=="string"?r:JSON.stringify(r)),console.log("[API] 🔧 Fetch options:",t);const a=await fetch(e,t);i&&(clearTimeout(i),i=null),console.log("[API] 📡 Response received:"),console.log(`[API] 📊 Status: ${a.status} ${a.statusText}`),console.log("[API] 📋 Response Headers:",Object.fromEntries(a.headers.entries())),console.log(`[API] ✅ OK: ${a.ok}`);const c=await a.text();console.log(`[API] 📖 Response body length: ${c.length} characters`),console.log("[API] 📄 Response preview (first 200 chars):",c.substring(0,200));let o=c;try{o=JSON.parse(c),console.log("[API] 🎯 Successfully parsed as JSON"),console.log("[API] 📊 JSON structure:",typeof o,Array.isArray(o)?`Array[${o.length}]`:"Object"),typeof o=="object"&&o!==null&&!Array.isArray(o)&&console.log("[API] 🔑 Object keys:",Object.keys(o))}catch(d){console.log("[API] 📝 Keeping as text (not valid JSON):",d.message)}const l={success:a.ok,status:a.status,statusText:a.statusText,data:o,headers:Object.fromEntries(a.headers.entries())};return console.log("[API] ✅ Final result:",{success:l.success,status:l.status,dataType:typeof l.data,hasData:!!l.data}),l}catch(t){i&&clearTimeout(i),console.error("[API] ❌ Error occurred:",t),console.error(`[API] 📛 Error name: ${t.name}`),console.error(`[API] 📛 Error message: ${t.message}`);const a=t.name==="AbortError",c=t.message.includes("fetch")||t.message.includes("Failed to fetch"),o=t.message.includes("CORS")||t.message.includes("cross-origin");console.log("[API] 🔍 Error analysis:"),console.log(`[API] ⏰ Is timeout: ${a}`),console.log(`[API] 🌐 Is network error: ${c}`),console.log(`[API] 🚫 Is CORS error: ${o}`);const l={success:!1,error:t.message,isTimeout:a,isNetworkError:c,isCorsError:o,status:0,data:null,headers:{}};return console.log("[API] ❌ Error result:",l),l}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break}}catch(s){console.error("[Comet Platform] Installation handling failed:",s)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await u.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await u.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleMessage(e,s,n){try{const{type:r,data:g,id:h}=e;if(!r){n({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${r}`,g);const i=this.messageHandlers.get(r);if(!i){n({success:!1,error:`No handler for message type: ${r}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const t=await i(g,s);n({success:!0,data:t,id:h})}catch(r){console.error("[Comet Platform] Message handling error:",r),n({success:!1,error:r.message||"Internal error",id:e.id})}}registerMessageHandler(e,s){this.messageHandlers.set(e,s)}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const m=new p;globalThis.serviceWorkerManager=m;
//# sourceMappingURL=service-worker.js.map

{"version":3,"file":"background.js","sources":["../src/platform/background.js"],"sourcesContent":["/**\n * Comet Extension Background Script (Cross-Browser Service Worker)\n * Handles extension lifecycle, message routing, and coordination\n * Works with Chrome, Firefox, Edge, Opera, Brave, and other WebExtension browsers\n * @module @voilajsx/comet\n * @file src/platform/background.js\n */\n\nimport { storage } from './storage.js';\nimport { messaging } from './messaging.js';\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser; // Firefox, newer browsers\n  } else if (typeof chrome !== 'undefined') {\n    return chrome; // Chrome, Edge, Opera, Brave\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Comet Background Manager\n * Handles all extension background functionality without app-specific logic\n */\nclass CometBackgroundManager {\n  constructor() {\n    this.api = browserAPI;\n    this.extensionId = this.api.runtime.id;\n    this.version = this.api.runtime.getManifest().version;\n    this.messageHandlers = new Map();\n    this.eventListeners = new Map();\n    this.isInitialized = false;\n\n    this.setupEventListeners();\n    this.initialize();\n  }\n\n  /**\n   * Setup all browser extension event listeners\n   */\n  setupEventListeners() {\n    // Extension lifecycle events\n    this.api.runtime.onInstalled.addListener((details) => {\n      this.handleInstallation(details);\n    });\n\n    this.api.runtime.onStartup.addListener(() => {\n      this.handleStartup();\n    });\n\n    // Message handling (universal routing)\n    this.api.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // Keep message channel open for async responses\n    });\n\n    // Tab events (if app needs them)\n    this.api.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      this.emitEvent('tabUpdated', { tabId, changeInfo, tab });\n    });\n\n    this.api.tabs.onActivated.addListener((activeInfo) => {\n      this.emitEvent('tabActivated', activeInfo);\n    });\n\n    // Storage change events\n    this.api.storage.onChanged.addListener((changes, namespace) => {\n      this.emitEvent('storageChanged', { changes, namespace });\n    });\n\n    // Action (icon) click events\n    if (this.api.action && this.api.action.onClicked) {\n      this.api.action.onClicked.addListener((tab) => {\n        this.emitEvent('actionClicked', { tab });\n      });\n    }\n  }\n\n  /**\n   * Initialize background service worker\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    console.log(\n      `[Comet Platform] Background service worker v${this.version} initialized`\n    );\n\n    try {\n      // Load app configuration\n      await this.loadAppConfig();\n\n      // Setup default message handlers\n      this.setupDefaultHandlers();\n\n      // Emit initialization event for app\n      this.emitEvent('backgroundReady', {\n        version: this.version,\n        extensionId: this.extensionId,\n      });\n\n      this.isInitialized = true;\n    } catch (error) {\n      console.error(\n        '[Comet Platform] Background initialization failed:',\n        error\n      );\n    }\n  }\n\n  /**\n   * Load app-specific configuration\n   */\n  async loadAppConfig() {\n    try {\n      // Try to load app config from storage or import\n      const config = await storage.get('appConfig');\n      this.appConfig = config || {};\n\n      // Setup app-specific handlers if config exists\n      if (this.appConfig.messageHandlers) {\n        this.registerMessageHandlers(this.appConfig.messageHandlers);\n      }\n    } catch (error) {\n      console.warn('[Comet Platform] No app config found, using defaults');\n      this.appConfig = {};\n    }\n  }\n\n  /**\n   * Setup default universal message handlers\n   */\n  setupDefaultHandlers() {\n    // Storage operations\n    this.registerMessageHandler('storage.get', async (data) => {\n      return await storage.get(data.keys);\n    });\n\n    this.registerMessageHandler('storage.set', async (data) => {\n      return await storage.set(data.items);\n    });\n\n    this.registerMessageHandler('storage.remove', async (data) => {\n      return await storage.remove(data.keys);\n    });\n\n    this.registerMessageHandler('storage.clear', async () => {\n      return await storage.clear();\n    });\n\n    // Tab operations\n    this.registerMessageHandler('tabs.getCurrent', async () => {\n      const [tab] = await this.api.tabs.query({\n        active: true,\n        currentWindow: true,\n      });\n      return tab;\n    });\n\n    this.registerMessageHandler('tabs.sendMessage', async (data) => {\n      return await messaging.sendToTab(data.tabId, data.message);\n    });\n\n    // Extension info\n    this.registerMessageHandler('extension.getInfo', async () => {\n      return {\n        id: this.extensionId,\n        version: this.version,\n        manifest: this.api.runtime.getManifest(),\n      };\n    });\n\n    // Badge operations\n    this.registerMessageHandler('badge.setText', async (data) => {\n      return await this.setBadgeText(data.text, data.tabId);\n    });\n\n    this.registerMessageHandler('badge.setColor', async (data) => {\n      return await this.setBadgeColor(data.color, data.tabId);\n    });\n\n    // Universal API proxy handler\n    this.registerMessageHandler('api.fetch', async (data) => {\n      return await this.universalApiFetch(data);\n    });\n  }\n\n  /**\n   * Universal API fetch method - handles all external API calls\n   * @param {object} data - Request configuration\n   * @returns {object} Response data\n   */\n  async universalApiFetch({\n    url,\n    method = 'GET',\n    headers = {},\n    body = null,\n    timeout = 30000,\n  }) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const fetchOptions = {\n        method: method.toUpperCase(),\n        headers: {\n          // Only add Content-Type for requests with body\n          ...(body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n          ...headers, // Custom headers override defaults\n        },\n        signal: controller.signal,\n      };\n\n      // Only add body for methods that support it\n      if (body && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n        fetchOptions.body = JSON.stringify(body);\n      }\n\n      console.log(`[Comet API] ${method.toUpperCase()} ${url}`, {\n        headers: fetchOptions.headers,\n        body: fetchOptions.body ? JSON.parse(fetchOptions.body) : null,\n      });\n\n      const response = await fetch(url, fetchOptions);\n\n      clearTimeout(timeoutId);\n\n      let data;\n      const contentType = response.headers.get('content-type');\n\n      try {\n        // Handle JSON responses\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json();\n        } else {\n          // Handle text responses\n          data = await response.text();\n          // Try to parse as JSON if it looks like JSON\n          if (data.trim().startsWith('{') || data.trim().startsWith('[')) {\n            try {\n              data = JSON.parse(data);\n            } catch (e) {\n              // Keep as text if JSON parsing fails\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`[Comet API] Failed to parse response body:`, error);\n        data = null;\n      }\n\n      const result = {\n        success: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        data: data,\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n\n      console.log(`[Comet API] Response:`, {\n        status: result.status,\n        success: result.success,\n        dataType: typeof result.data,\n        hasData: !!result.data,\n      });\n\n      return result;\n    } catch (error) {\n      console.error(`[Comet API] Request failed:`, {\n        url,\n        method,\n        error: error.message,\n        isTimeout: error.name === 'AbortError',\n      });\n\n      return {\n        success: false,\n        error: error.message,\n        isTimeout: error.name === 'AbortError',\n        status: 0,\n        data: null,\n        headers: {},\n      };\n    }\n  }\n\n  /**\n   * Handle extension installation/update\n   */\n  async handleInstallation(details) {\n    console.log(`[Comet Platform] Installation event: ${details.reason}`);\n\n    const installationData = {\n      reason: details.reason,\n      previousVersion: details.previousVersion,\n      timestamp: Date.now(),\n      version: this.version,\n    };\n\n    try {\n      switch (details.reason) {\n        case 'install':\n          await this.handleFirstInstall();\n          break;\n        case 'update':\n          await this.handleUpdate(details.previousVersion);\n          break;\n        case 'chrome_update':\n        case 'browser_update':\n          await this.handleBrowserUpdate();\n          break;\n      }\n\n      // Emit event for app to handle\n      this.emitEvent('installed', installationData);\n    } catch (error) {\n      console.error('[Comet Platform] Installation handling failed:', error);\n    }\n  }\n\n  /**\n   * Handle first installation\n   */\n  async handleFirstInstall() {\n    console.log('[Comet Platform] First installation');\n\n    // Store installation info\n    await storage.set({\n      installDate: Date.now(),\n      version: this.version,\n      firstInstall: true,\n    });\n  }\n\n  /**\n   * Handle extension update\n   */\n  async handleUpdate(previousVersion) {\n    console.log(\n      `[Comet Platform] Updated from ${previousVersion} to ${this.version}`\n    );\n\n    // Store update info\n    await storage.set({\n      lastUpdate: Date.now(),\n      version: this.version,\n      previousVersion,\n    });\n  }\n\n  /**\n   * Handle browser update\n   */\n  async handleBrowserUpdate() {\n    console.log('[Comet Platform] Browser updated');\n    // No special handling needed, just log\n  }\n\n  /**\n   * Handle extension startup\n   */\n  async handleStartup() {\n    console.log('[Comet Platform] Extension startup');\n    this.emitEvent('startup', { timestamp: Date.now() });\n  }\n\n  /**\n   * Universal message handler - routes messages to registered handlers\n   */\n  async handleMessage(message, sender, sendResponse) {\n    try {\n      const { type, data, id } = message;\n\n      if (!type) {\n        sendResponse({ success: false, error: 'Message type required' });\n        return;\n      }\n\n      console.log(`[Comet Platform] Message received: ${type}`, data);\n\n      // Check if handler exists\n      const handler = this.messageHandlers.get(type);\n      if (!handler) {\n        // Emit event for app to handle unknown messages\n        const result = await this.emitEvent('message', { type, data, sender });\n        sendResponse(\n          result || {\n            success: false,\n            error: `No handler for message type: ${type}`,\n            availableHandlers: Array.from(this.messageHandlers.keys()),\n          }\n        );\n        return;\n      }\n\n      // Execute handler\n      const result = await handler(data, sender);\n      sendResponse({\n        success: true,\n        data: result,\n        id,\n      });\n    } catch (error) {\n      console.error('[Comet Platform] Message handling error:', error);\n      sendResponse({\n        success: false,\n        error: error.message || 'Internal error',\n        id: message.id,\n      });\n    }\n  }\n\n  /**\n   * Register a message handler\n   */\n  registerMessageHandler(type, handler) {\n    this.messageHandlers.set(type, handler);\n  }\n\n  /**\n   * Register multiple message handlers\n   */\n  registerMessageHandlers(handlers) {\n    Object.entries(handlers).forEach(([type, handler]) => {\n      this.registerMessageHandler(type, handler);\n    });\n  }\n\n  /**\n   * Register event listener\n   */\n  addEventListener(event, listener) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(listener);\n  }\n\n  /**\n   * Emit event to registered listeners\n   */\n  async emitEvent(event, data) {\n    const listeners = this.eventListeners.get(event) || [];\n\n    if (listeners.length === 0) {\n      // No listeners, but log for debugging\n      console.log(`[Comet Platform] Event emitted: ${event}`, data);\n      return null;\n    }\n\n    let lastResult = null;\n    for (const listener of listeners) {\n      try {\n        lastResult = await listener(data);\n      } catch (error) {\n        console.error(\n          `[Comet Platform] Event listener error for ${event}:`,\n          error\n        );\n      }\n    }\n\n    return lastResult;\n  }\n\n  /**\n   * Set badge text (cross-browser compatible)\n   */\n  async setBadgeText(text, tabId = null) {\n    try {\n      if (!this.api.action) {\n        console.warn('[Comet Platform] Badge API not available');\n        return false;\n      }\n\n      const options = { text: String(text) };\n      if (tabId) options.tabId = tabId;\n\n      await this.api.action.setBadgeText(options);\n      return true;\n    } catch (error) {\n      console.error('[Comet Platform] Badge text update failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set badge background color (cross-browser compatible)\n   */\n  async setBadgeColor(color, tabId = null) {\n    try {\n      if (!this.api.action) {\n        console.warn('[Comet Platform] Badge API not available');\n        return false;\n      }\n\n      const options = { color };\n      if (tabId) options.tabId = tabId;\n\n      await this.api.action.setBadgeBackgroundColor(options);\n      return true;\n    } catch (error) {\n      console.error('[Comet Platform] Badge color update failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get extension info\n   */\n  getExtensionInfo() {\n    return {\n      id: this.extensionId,\n      version: this.version,\n      manifest: this.api.runtime.getManifest(),\n      initialized: this.isInitialized,\n      browser: this.getBrowserInfo(),\n    };\n  }\n\n  /**\n   * Get browser information\n   */\n  getBrowserInfo() {\n    if (typeof browser !== 'undefined') {\n      return { type: 'firefox', api: 'browser' };\n    } else if (typeof chrome !== 'undefined') {\n      return { type: 'chromium', api: 'chrome' };\n    }\n    return { type: 'unknown', api: 'unknown' };\n  }\n}\n\n// Initialize the Comet background manager\nconst backgroundManager = new CometBackgroundManager();\n\n// Export for app usage (if needed)\nglobalThis.backgroundManager = backgroundManager;\n\n// Export background manager\nexport { backgroundManager };\n"],"names":["browserAPI","CometBackgroundManager","details","message","sender","sendResponse","tabId","changeInfo","tab","activeInfo","changes","namespace","error","config","storage","data","messaging","url","method","headers","body","timeout","controller","timeoutId","fetchOptions","response","contentType","result","installationData","previousVersion","type","id","handler","handlers","event","listener","listeners","lastResult","text","options","color","backgroundManager"],"mappings":"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"}
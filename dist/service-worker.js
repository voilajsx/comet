import{s as g}from"./storage-Bf2k_hjS.js";const p=(()=>{if(typeof browser<"u")return browser;if(typeof chrome<"u")return chrome;throw new Error("No browser extension API available")})();class m{api;extensionId;version;messageHandlers;isInitialized;constructor(){this.api=p,this.extensionId=this.api.runtime.id,this.version=this.api.runtime.getManifest().version,this.messageHandlers=new Map,this.isInitialized=!1,this.setupEventListeners(),this.initialize()}setupEventListeners(){this.api.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),this.api.runtime.onMessage.addListener((e,t,n)=>(this.handleMessage(e,t,n),!0))}async initialize(){if(!this.isInitialized){console.log(`[Comet Platform] Service worker v${this.version} initialized`);try{this.setupDefaultHandlers(),this.isInitialized=!0}catch(e){console.error("[Comet Platform] Service worker initialization failed:",e)}}}setupDefaultHandlers(){this.registerMessageHandler("storage.get",async e=>await g.get(e.keys,e.fallback)),this.registerMessageHandler("storage.set",async e=>await g.set(e.items||e)),this.registerMessageHandler("storage.remove",async e=>await g.remove(e.keys)),this.registerMessageHandler("storage.clear",async()=>await g.clear()),this.registerMessageHandler("tabs.query",async e=>{try{return await this.api.tabs.query(e||{})}catch(t){throw t}}),this.registerMessageHandler("tabs.getCurrent",async()=>{try{return(await this.api.tabs.query({active:!0,currentWindow:!0}))[0]||null}catch(e){throw e}}),this.registerMessageHandler("badge.setText",async e=>{try{if(!this.api.action)return!1;const t={text:String(e.text||"")};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeText(t),!0}catch(t){return console.error("[Comet Platform] Badge setText failed:",t),!1}}),this.registerMessageHandler("badge.setColor",async e=>{try{if(!this.api.action)return!1;const t={color:e.color};return e.tabId&&(t.tabId=e.tabId),await this.api.action.setBadgeBackgroundColor(t),!0}catch(t){return console.error("[Comet Platform] Badge setColor failed:",t),!1}}),this.registerMessageHandler("api.fetch",async e=>await this.universalApiFetch(e)),this.registerMessageHandler("extension.getInfo",async()=>({id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest()}))}async universalApiFetch({url:e,method:t="GET",headers:n={},body:r=null,timeout:d=15e3}){console.log(`[API] 🚀 Starting ${t} ${e}`),console.log("[API] 📋 Headers:",n),console.log("[API] 📦 Body:",r);let h=null,i=null;try{h=new AbortController,i=setTimeout(()=>{console.log(`[API] ⏰ Request timeout after ${d}ms`),h.abort()},d);const o={method:t.toUpperCase(),headers:{Accept:"application/json, text/plain, */*","Cache-Control":"no-cache",...r&&["POST","PUT","PATCH"].includes(t.toUpperCase())?{"Content-Type":"application/json"}:{},...n},signal:h.signal,mode:"cors",credentials:"omit",redirect:"follow"};r&&["POST","PUT","PATCH"].includes(t.toUpperCase())&&(o.body=typeof r=="string"?r:JSON.stringify(r)),console.log("[API] 🔧 Fetch options:",o);const s=await fetch(e,o);i&&(clearTimeout(i),i=null),console.log("[API] 📡 Response received:"),console.log(`[API] 📊 Status: ${s.status} ${s.statusText}`),console.log("[API] 📋 Response Headers:",Object.fromEntries(s.headers.entries())),console.log(`[API] ✅ OK: ${s.ok}`);const c=await s.text();console.log(`[API] 📖 Response body length: ${c.length} characters`),console.log("[API] 📄 Response preview (first 200 chars):",c.substring(0,200));let a=c;try{a=JSON.parse(c),console.log("[API] 🎯 Successfully parsed as JSON"),console.log("[API] 📊 JSON structure:",typeof a,Array.isArray(a)?`Array[${a.length}]`:"Object"),typeof a=="object"&&a!==null&&!Array.isArray(a)&&console.log("[API] 🔑 Object keys:",Object.keys(a))}catch(u){console.log("[API] 📝 Keeping as text (not valid JSON):",u instanceof Error?u.message:String(u))}const l={success:s.ok,status:s.status,statusText:s.statusText,data:a,headers:Object.fromEntries(s.headers.entries())};return console.log("[API] ✅ Final result:",{success:l.success,status:l.status,dataType:typeof l.data,hasData:!!l.data}),l}catch(o){i&&clearTimeout(i),console.error("[API] ❌ Error occurred:",o);const s=o instanceof Error?o.message:String(o),c=o instanceof Error?o.name:"Unknown";console.error(`[API] 📛 Error name: ${c}`),console.error(`[API] 📛 Error message: ${s}`);const a=c==="AbortError",l=s.includes("fetch")||s.includes("Failed to fetch"),u=s.includes("CORS")||s.includes("cross-origin");console.log("[API] 🔍 Error analysis:"),console.log(`[API] ⏰ Is timeout: ${a}`),console.log(`[API] 🌐 Is network error: ${l}`),console.log(`[API] 🚫 Is CORS error: ${u}`);const f={success:!1,error:s,isTimeout:a,isNetworkError:l,isCorsError:u,status:0,statusText:"",data:null,headers:{}};return console.log("[API] ❌ Error result:",f),f}}async handleInstallation(e){console.log(`[Comet Platform] Installation event: ${e.reason}`);try{switch(e.reason){case"install":await this.handleFirstInstall();break;case"update":await this.handleUpdate(e.previousVersion);break}}catch(t){console.error("[Comet Platform] Installation handling failed:",t)}}async handleFirstInstall(){console.log("[Comet Platform] First installation"),await g.set({installDate:Date.now(),version:this.version,firstInstall:!0})}async handleUpdate(e){console.log(`[Comet Platform] Updated from ${e} to ${this.version}`),await g.set({lastUpdate:Date.now(),version:this.version,previousVersion:e})}async handleMessage(e,t,n){try{const{type:r,data:d,id:h}=e;if(!r){n({success:!1,error:"Message type required"});return}console.log(`[Comet Platform] Message received: ${r}`,d);const i=this.messageHandlers.get(r);if(!i){n({success:!1,error:`No handler for message type: ${r}`,availableHandlers:Array.from(this.messageHandlers.keys())});return}const o=await i(d,t);n({success:!0,data:o,id:h})}catch(r){console.error("[Comet Platform] Message handling error:",r),n({success:!1,error:r instanceof Error?r.message:"Internal error",id:e.id})}}registerMessageHandler(e,t){this.messageHandlers.set(e,t)}getExtensionInfo(){return{id:this.extensionId,version:this.version,manifest:this.api.runtime.getManifest(),initialized:this.isInitialized,browser:this.getBrowserInfo()}}getBrowserInfo(){return typeof browser<"u"?{type:"firefox",api:"browser"}:typeof chrome<"u"?{type:"chromium",api:"chrome"}:{type:"unknown",api:"unknown"}}}const I=new m;globalThis.serviceWorkerManager=I;
//# sourceMappingURL=service-worker.js.map

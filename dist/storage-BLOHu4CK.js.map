{"version":3,"mappings":"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","names":["browserAPI","CometStorageManager","defaults","__vitePreload","error","keys","fallback","result","output","key","merged","data","value","callback","listener","changes","namespace","storage"],"ignoreList":[],"sources":["../src/platform/storage.js"],"sourcesContent":["/**\n * Comet Framework - Essential Storage Utility with Auto-reload on Rebuild\n * @module @voilajsx/comet\n * @file src/platform/storage.js\n */\n\n// Cross-browser API detection\nconst browserAPI = (() => {\n  if (typeof browser !== 'undefined') {\n    return browser; // Firefox, newer browsers\n  } else if (typeof chrome !== 'undefined') {\n    return chrome; // Chrome, Edge, Opera, Brave\n  } else {\n    throw new Error('No browser extension API available');\n  }\n})();\n\n/**\n * Essential Comet Storage Manager with auto-reload defaults\n */\nclass CometStorageManager {\n  constructor() {\n    this.api = browserAPI;\n    this.defaults = {};\n    this.defaultsLoaded = false;\n    this.isInitialized = false;\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize storage with auto-loading defaults\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      await this.loadDefaults();\n      await this.initializeDefaults();\n      this.isInitialized = true;\n      console.log('[Comet Storage] Initialized with defaults');\n    } catch (error) {\n      console.warn(\n        '[Comet Storage] No defaults found, continuing without defaults'\n      );\n      this.defaults = {};\n      this.defaultsLoaded = true;\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Load defaults from defaults.js\n   */\n  async loadDefaults() {\n    if (this.defaultsLoaded) return;\n\n    try {\n      // Import from JS file instead of JSON for better compatibility\n      const { default: defaults } = await import('../defaults.js');\n      this.defaults = defaults || {};\n      this.defaultsLoaded = true;\n      console.log(\n        '[Comet Storage] Loaded defaults from defaults.js:',\n        Object.keys(this.defaults)\n      );\n    } catch (error) {\n      console.warn('[Comet Storage] Failed to load defaults.js:', error);\n      this.defaults = {};\n      this.defaultsLoaded = true;\n    }\n  }\n\n  /**\n   * Initialize storage with defaults - always reloads on extension reload (batched writes)\n   */\n  async initializeDefaults() {\n    try {\n      console.log('[Comet Storage] Reloading defaults on extension startup');\n\n      // Batch all defaults into a single write operation\n      if (Object.keys(this.defaults).length > 0) {\n        // Set all defaults in one operation to avoid quota limits\n        await this.api.storage.sync.set(this.defaults);\n        console.log(\n          '[Comet Storage] All defaults applied in batch:',\n          Object.keys(this.defaults)\n        );\n      } else {\n        console.log('[Comet Storage] No defaults to apply');\n      }\n\n      // Mark as initialized (local storage doesn't count towards quota)\n      await this.api.storage.local.set({ _defaultsInitialized: true });\n    } catch (error) {\n      console.warn('[Comet Storage] Failed to initialize defaults:', error);\n    }\n  }\n\n  /**\n   * Get data from storage with auto-fallback to defaults\n   * @param {string|array} keys - Keys to retrieve\n   * @param {any} fallback - Fallback value if not found\n   * @returns {Promise<any>} Retrieved data\n   */\n  async get(keys, fallback = undefined) {\n    try {\n      await this.initialize();\n\n      // Handle single key\n      if (typeof keys === 'string') {\n        const result = await this.api.storage.sync.get(keys);\n\n        if (result[keys] !== undefined) {\n          return result[keys];\n        }\n\n        // Try defaults\n        if (this.defaults[keys] !== undefined) {\n          return this.defaults[keys];\n        }\n\n        return fallback;\n      }\n\n      // Handle array of keys\n      if (Array.isArray(keys)) {\n        const result = await this.api.storage.sync.get(keys);\n        const output = {};\n\n        for (const key of keys) {\n          if (result[key] !== undefined) {\n            output[key] = result[key];\n          } else if (this.defaults[key] !== undefined) {\n            output[key] = this.defaults[key];\n          } else {\n            output[key] = undefined;\n          }\n        }\n\n        return output;\n      }\n\n      // Handle null (get all)\n      if (keys === null) {\n        const result = await this.api.storage.sync.get(null);\n\n        // Merge with defaults\n        const merged = { ...this.defaults };\n        Object.assign(merged, result);\n        delete merged._defaultsInitialized; // Remove internal flag\n\n        return merged;\n      }\n\n      return fallback;\n    } catch (error) {\n      console.error('[Comet Storage] Get operation failed:', error);\n      throw new Error('Failed to read from storage: ' + error.message);\n    }\n  }\n\n  /**\n   * Set data to storage\n   * @param {object|string} data - Data to store (object) or key (string)\n   * @param {any} [value] - Value if first param is key string\n   * @returns {Promise<boolean>} Success status\n   */\n  async set(data, value = undefined) {\n    try {\n      await this.initialize();\n\n      // Handle set(key, value) syntax\n      if (typeof data === 'string') {\n        await this.api.storage.sync.set({ [data]: value });\n        return true;\n      }\n\n      // Handle object syntax\n      if (typeof data === 'object' && data !== null) {\n        await this.api.storage.sync.set(data);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('[Comet Storage] Set operation failed:', error);\n      throw new Error('Failed to write to storage: ' + error.message);\n    }\n  }\n\n  /**\n   * Remove data from storage\n   * @param {string|array} keys - Keys to remove\n   * @returns {Promise<boolean>} Success status\n   */\n  async remove(keys) {\n    try {\n      await this.api.storage.sync.remove(keys);\n      return true;\n    } catch (error) {\n      console.error('[Comet Storage] Remove operation failed:', error);\n      throw new Error('Failed to remove from storage: ' + error.message);\n    }\n  }\n\n  /**\n   * Clear all data from storage\n   * @returns {Promise<boolean>} Success status\n   */\n  async clear() {\n    try {\n      await this.api.storage.sync.clear();\n      await this.api.storage.local.clear();\n      return true;\n    } catch (error) {\n      console.error('[Comet Storage] Clear operation failed:', error);\n      throw new Error('Failed to clear storage: ' + error.message);\n    }\n  }\n\n  /**\n   * Check if key exists in storage (including defaults)\n   * @param {string} key - Key to check\n   * @returns {Promise<boolean>} True if key exists\n   */\n  async has(key) {\n    try {\n      const value = await this.get(key);\n      return value !== undefined;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Listen to storage changes\n   * @param {function} callback - Callback function (changes, namespace) => void\n   * @returns {function} Unsubscribe function\n   */\n  onChange(callback) {\n    const listener = (changes, namespace) => {\n      callback(changes, namespace);\n    };\n\n    this.api.storage.onChanged.addListener(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.api.storage.onChanged.removeListener(listener);\n    };\n  }\n\n  /**\n   * Get all defaults\n   * @returns {object} Defaults object\n   */\n  getDefaults() {\n    return JSON.parse(JSON.stringify(this.defaults));\n  }\n\n  /**\n   * Force reload defaults (simplified - just reinitialize)\n   * @returns {Promise<boolean>} Success status\n   */\n  async reloadDefaults() {\n    try {\n      // Reset state\n      this.defaultsLoaded = false;\n      this.isInitialized = false;\n      this.defaults = {};\n\n      // Reinitialize (will always reload)\n      await this.initialize();\n\n      console.log('[Comet Storage] Defaults reloaded manually');\n      return true;\n    } catch (error) {\n      console.error('[Comet Storage] Failed to reload defaults:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Storage error class\n */\nclass CometStorageError extends Error {\n  constructor(message, originalError) {\n    super(message);\n    this.name = 'CometStorageError';\n    this.originalError = originalError;\n  }\n}\n\n// Create and export storage instance\nexport const storage = new CometStorageManager();\n\n// Export class for advanced usage\nexport { CometStorageManager, CometStorageError };\n"],"file":"storage-BLOHu4CK.js"}